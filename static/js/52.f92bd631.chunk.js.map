{"version":3,"sources":["utils/aave/contract_wrappers/aave_reader.ts"],"names":["AaveReaderContract","address","supportedProvider","txDefaults","logDecodeDependencies","deployedBytecode","ABI","_methodABIIndex","classUtils","bindAll","forEach","item","index","type","methodAbi","name","methodName","this","methodAbiToFunctionSignature","callData","functionSignature","getFunctionSignature","_lookupAbiEncoder","strictDecode","strictDecodeReturnValue","getSelector","ethAccount","reserves","self","assert","isString","isArray","callAsync","defaultBlock","BaseContract","_assertCallParams","_performCallAsync","data","getABIEncodedTransactionData","rawCallResult","abiEncoder","_strictEncodeArguments","toLowerCase","artifact","_lendingPoolAddressProvider","doesConformToSchema","schemas","txDataSchema","addressSchema","numberSchema","jsNumber","undefined","compilerOutput","Error","provider","providerUtils","standardizeOrThrow","bytecode","evm","object","abi","logDecodeDependenciesAbiOnly","Object","keys","key","deployAsync","isHexString","constructorAbi","_lookupConstructorAbi","_formatABIDataItemList","inputs","_bigNumberToString","iface","ethers","Interface","deployInfo","deployFunction","txData","encode","web3Wrapper","Web3Wrapper","_applyDefaultsToContractTxDataAsync","estimateGasAsync","bind","txDataWithDefaults","sendTransactionAsync","txHash","awaitTransactionSuccessAsync","txReceipt","contractInstance","contractAddress","constructorArgs","constant","outputs","components","payable","stateMutability","contractName"],"mappings":"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","file":"static/js/52.f92bd631.chunk.js","sourcesContent":["// tslint:disable:no-consecutive-blank-lines ordered-imports align trailing-comma enum-naming\n// tslint:disable:whitespace no-unbound-method no-trailing-whitespace\n// tslint:disable:no-unused-variable\nimport { ContractFunctionObj, BaseContract, methodAbiToFunctionSignature } from \"@0x/base-contract\";\nimport { schemas } from \"@0x/json-schemas\";\nimport {\n\tBlockParam,\n\tCallData,\n\tContractAbi,\n\tContractArtifact,\n\tMethodAbi,\n\tTxData,\n\tSupportedProvider,\n} from \"ethereum-types\";\nimport { BigNumber, classUtils, providerUtils } from \"@0x/utils\";\nimport { SimpleContractArtifact } from \"@0x/types\";\nimport { Web3Wrapper } from \"@0x/web3-wrapper\";\nimport { assert } from \"@0x/assert\";\nimport * as ethers from \"ethers\";\n// tslint:enable:no-unused-variable\n\n/* istanbul ignore next */\n// tslint:disable:no-parameter-reassignment\n// tslint:disable-next-line:class-name\nexport class AaveReaderContract extends BaseContract {\n\t/**\n\t * @ignore\n\t */\n\tpublic static deployedBytecode: string | undefined;\n\tpublic static contractName = \"AaveReader\";\n\tprivate readonly _methodABIIndex: { [name: string]: number } = {};\n\tpublic static async deployFrom0xArtifactAsync(\n\t\tartifact: ContractArtifact | SimpleContractArtifact,\n\t\tsupportedProvider: SupportedProvider,\n\t\ttxDefaults: Partial<TxData>,\n\t\tlogDecodeDependencies: { [contractName: string]: ContractArtifact | SimpleContractArtifact },\n\t\t_lendingPoolAddressProvider: string\n\t): Promise<AaveReaderContract> {\n\t\tassert.doesConformToSchema(\"txDefaults\", txDefaults, schemas.txDataSchema, [\n\t\t\tschemas.addressSchema,\n\t\t\tschemas.numberSchema,\n\t\t\tschemas.jsNumber,\n\t\t]);\n\t\tif (artifact.compilerOutput === undefined) {\n\t\t\tthrow new Error(\"Compiler output not found in the artifact file\");\n\t\t}\n\t\tconst provider = providerUtils.standardizeOrThrow(supportedProvider);\n\t\tconst bytecode = artifact.compilerOutput.evm.bytecode.object;\n\t\tconst abi = artifact.compilerOutput.abi;\n\t\tconst logDecodeDependenciesAbiOnly: { [contractName: string]: ContractAbi } = {};\n\t\tif (Object.keys(logDecodeDependencies) !== undefined) {\n\t\t\tfor (const key of Object.keys(logDecodeDependencies)) {\n\t\t\t\tlogDecodeDependenciesAbiOnly[key] = logDecodeDependencies[key].compilerOutput.abi;\n\t\t\t}\n\t\t}\n\t\treturn AaveReaderContract.deployAsync(\n\t\t\tbytecode,\n\t\t\tabi,\n\t\t\tprovider,\n\t\t\ttxDefaults,\n\t\t\tlogDecodeDependenciesAbiOnly,\n\t\t\t_lendingPoolAddressProvider\n\t\t);\n\t}\n\tpublic static async deployAsync(\n\t\tbytecode: string,\n\t\tabi: ContractAbi,\n\t\tsupportedProvider: SupportedProvider,\n\t\ttxDefaults: Partial<TxData>,\n\t\tlogDecodeDependencies: { [contractName: string]: ContractAbi },\n\t\t_lendingPoolAddressProvider: string\n\t): Promise<AaveReaderContract> {\n\t\tassert.isHexString(\"bytecode\", bytecode);\n\t\tassert.doesConformToSchema(\"txDefaults\", txDefaults, schemas.txDataSchema, [\n\t\t\tschemas.addressSchema,\n\t\t\tschemas.numberSchema,\n\t\t\tschemas.jsNumber,\n\t\t]);\n\t\tconst provider = providerUtils.standardizeOrThrow(supportedProvider);\n\t\tconst constructorAbi = BaseContract._lookupConstructorAbi(abi);\n\t\t[_lendingPoolAddressProvider] = BaseContract._formatABIDataItemList(\n\t\t\tconstructorAbi.inputs,\n\t\t\t[_lendingPoolAddressProvider],\n\t\t\tBaseContract._bigNumberToString\n\t\t);\n\t\t// @ts-ignore\n\t\tconst iface = new ethers.utils.Interface(abi);\n\t\t// @ts-ignore\n\t\tconst deployInfo = iface.deployFunction;\n\t\tconst txData = deployInfo.encode(bytecode, [_lendingPoolAddressProvider]);\n\t\tconst web3Wrapper = new Web3Wrapper(provider);\n\t\tconst txDataWithDefaults = await BaseContract._applyDefaultsToContractTxDataAsync(\n\t\t\t{\n\t\t\t\tdata: txData,\n\t\t\t\t...txDefaults,\n\t\t\t},\n\t\t\tweb3Wrapper.estimateGasAsync.bind(web3Wrapper)\n\t\t);\n\t\tconst txHash = await web3Wrapper.sendTransactionAsync(txDataWithDefaults);\n\t\tconst txReceipt = await web3Wrapper.awaitTransactionSuccessAsync(txHash);\n\t\tconst contractInstance = new AaveReaderContract(\n\t\t\ttxReceipt.contractAddress as string,\n\t\t\tprovider,\n\t\t\ttxDefaults,\n\t\t\tlogDecodeDependencies\n\t\t);\n\t\tcontractInstance.constructorArgs = [_lendingPoolAddressProvider];\n\t\treturn contractInstance;\n\t}\n\n\t/**\n\t * @returns      The contract ABI\n\t */\n\tpublic static ABI(): ContractAbi {\n\t\tconst abi = [\n\t\t\t{\n\t\t\t\tconstant: true,\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"ethAccount\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"reserves\",\n\t\t\t\t\t\ttype: \"address[]\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: \"getBatchATokensData\",\n\t\t\t\toutputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"tokenData\",\n\t\t\t\t\t\ttype: \"tuple[]\",\n\t\t\t\t\t\tcomponents: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: \"reserveAddress\",\n\t\t\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: \"allowance\",\n\t\t\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: \"balance\",\n\t\t\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: \"balanceUnderlying\",\n\t\t\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: \"borrowBalance\",\n\t\t\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tpayable: false,\n\t\t\t\tstateMutability: \"view\",\n\t\t\t\ttype: \"function\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_lendingPoolAddressProvider\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\toutputs: [],\n\t\t\t\tpayable: false,\n\t\t\t\tstateMutability: \"nonpayable\",\n\t\t\t\ttype: \"constructor\",\n\t\t\t},\n\t\t] as ContractAbi;\n\t\treturn abi;\n\t}\n\n\tpublic getFunctionSignature(methodName: string): string {\n\t\tconst index = this._methodABIIndex[methodName];\n\t\tconst methodAbi = AaveReaderContract.ABI()[index] as MethodAbi; // tslint:disable-line:no-unnecessary-type-assertion\n\t\tconst functionSignature = methodAbiToFunctionSignature(methodAbi);\n\t\treturn functionSignature;\n\t}\n\tpublic getABIDecodedTransactionData<T>(methodName: string, callData: string): T {\n\t\tconst functionSignature = this.getFunctionSignature(methodName);\n\t\tconst self = (this as any) as AaveReaderContract;\n\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\tconst abiDecodedCallData = abiEncoder.strictDecode<T>(callData);\n\t\treturn abiDecodedCallData;\n\t}\n\tpublic getABIDecodedReturnData<T>(methodName: string, callData: string): T {\n\t\tconst functionSignature = this.getFunctionSignature(methodName);\n\t\tconst self = (this as any) as AaveReaderContract;\n\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\tconst abiDecodedCallData = abiEncoder.strictDecodeReturnValue<T>(callData);\n\t\treturn abiDecodedCallData;\n\t}\n\tpublic getSelector(methodName: string): string {\n\t\tconst functionSignature = this.getFunctionSignature(methodName);\n\t\tconst self = (this as any) as AaveReaderContract;\n\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\treturn abiEncoder.getSelector();\n\t}\n\n\tpublic getBatchATokensData(\n\t\tethAccount: string,\n\t\treserves: string[]\n\t): ContractFunctionObj<\n\t\tArray<{\n\t\t\treserveAddress: string;\n\t\t\tallowance: BigNumber;\n\t\t\tbalance: BigNumber;\n\t\t\tbalanceUnderlying: BigNumber;\n\t\t\tborrowBalance: BigNumber;\n\t\t}>\n\t> {\n\t\tconst self = (this as any) as AaveReaderContract;\n\t\tassert.isString(\"ethAccount\", ethAccount);\n\t\tassert.isArray(\"reserves\", reserves);\n\t\tconst functionSignature = \"getBatchATokensData(address,address[])\";\n\n\t\treturn {\n\t\t\tasync callAsync(\n\t\t\t\tcallData: Partial<CallData> = {},\n\t\t\t\tdefaultBlock?: BlockParam\n\t\t\t): Promise<\n\t\t\t\tArray<{\n\t\t\t\t\treserveAddress: string;\n\t\t\t\t\tallowance: BigNumber;\n\t\t\t\t\tbalance: BigNumber;\n\t\t\t\t\tbalanceUnderlying: BigNumber;\n\t\t\t\t\tborrowBalance: BigNumber;\n\t\t\t\t}>\n\t\t\t> {\n\t\t\t\tBaseContract._assertCallParams(callData, defaultBlock);\n\t\t\t\tconst rawCallResult = await self._performCallAsync(\n\t\t\t\t\t{ ...callData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tdefaultBlock\n\t\t\t\t);\n\t\t\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\t\t\treturn abiEncoder.strictDecodeReturnValue<\n\t\t\t\t\tArray<{\n\t\t\t\t\t\treserveAddress: string;\n\t\t\t\t\t\tallowance: BigNumber;\n\t\t\t\t\t\tbalance: BigNumber;\n\t\t\t\t\t\tbalanceUnderlying: BigNumber;\n\t\t\t\t\t\tborrowBalance: BigNumber;\n\t\t\t\t\t}>\n\t\t\t\t>(rawCallResult);\n\t\t\t},\n\t\t\tgetABIEncodedTransactionData(): string {\n\t\t\t\treturn self._strictEncodeArguments(functionSignature, [ethAccount.toLowerCase(), reserves]);\n\t\t\t},\n\t\t};\n\t}\n\n\tconstructor(\n\t\taddress: string,\n\t\tsupportedProvider: SupportedProvider,\n\t\ttxDefaults?: Partial<TxData>,\n\t\tlogDecodeDependencies?: { [contractName: string]: ContractAbi },\n\t\tdeployedBytecode: string | undefined = AaveReaderContract.deployedBytecode\n\t) {\n\t\tsuper(\n\t\t\t\"AaveReader\",\n\t\t\tAaveReaderContract.ABI(),\n\t\t\taddress,\n\t\t\tsupportedProvider,\n\t\t\ttxDefaults,\n\t\t\tlogDecodeDependencies,\n\t\t\tdeployedBytecode\n\t\t);\n\t\tclassUtils.bindAll(this, [\"_abiEncoderByFunctionSignature\", \"address\", \"_web3Wrapper\"]);\n\t\tAaveReaderContract.ABI().forEach((item, index) => {\n\t\t\tif (item.type === \"function\") {\n\t\t\t\tconst methodAbi = item as MethodAbi;\n\t\t\t\tthis._methodABIIndex[methodAbi.name] = index;\n\t\t\t}\n\t\t});\n\t}\n}\n\n// tslint:disable:max-file-line-count\n// tslint:enable:no-unbound-method no-parameter-reassignment no-consecutive-blank-lines ordered-imports align\n// tslint:enable:trailing-comma whitespace no-trailing-whitespace\n"],"sourceRoot":""}