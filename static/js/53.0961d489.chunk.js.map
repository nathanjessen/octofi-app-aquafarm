{"version":3,"sources":["utils/aave/contract_wrappers/atoken.ts"],"names":["AtokenEvents","AtokenContract","address","supportedProvider","txDefaults","logDecodeDependencies","deployedBytecode","ABI","_methodABIIndex","_subscriptionManager","classUtils","bindAll","SubscriptionManager","_web3Wrapper","forEach","item","index","type","methodAbi","name","methodName","this","methodAbiToFunctionSignature","callData","functionSignature","getFunctionSignature","_lookupAbiEncoder","strictDecode","strictDecodeReturnValue","getSelector","self","callAsync","defaultBlock","BaseContract","_assertCallParams","_performCallAsync","data","getABIEncodedTransactionData","rawCallResult","abiEncoder","_strictEncodeArguments","owner","spender","assert","isString","toLowerCase","value","isBigNumber","sendTransactionAsync","txData","opts","shouldValidate","_applyDefaultsToTxDataAsync","estimateGasAsync","bind","txDataWithDefaults","awaitTransactionSuccessAsync","_promiseWithTransactionHash","subtractedValue","addedValue","recipient","amount","sender","_to","_from","_amount","_account","_value","_user","eventName","indexFilterValues","callback","isVerbose","blockPollingIntervalMs","doesBelongToStringEnum","doesConformToSchema","schemas","indexFilterValuesSchema","isFunction","subscriptionToken","subscribe","unsubscribe","unsubscribeAll","blockRange","blockRangeSchema","getLogsAsync","logs","artifact","_addressesProvider","_underlyingAsset","_underlyingAssetDecimals","_name","_symbol","txDataSchema","addressSchema","numberSchema","jsNumber","undefined","compilerOutput","Error","provider","providerUtils","standardizeOrThrow","bytecode","evm","object","abi","logDecodeDependenciesAbiOnly","Object","keys","key","deployAsync","isHexString","constructorAbi","_lookupConstructorAbi","_formatABIDataItemList","inputs","_bigNumberToString","iface","ethers","Interface","deployInfo","deployFunction","encode","web3Wrapper","Web3Wrapper","_applyDefaultsToContractTxDataAsync","txHash","txReceipt","contractInstance","contractAddress","constructorArgs","outputs","payable","stateMutability","anonymous","indexed","constant","contractName"],"mappings":"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","file":"static/js/53.0961d489.chunk.js","sourcesContent":["// tslint:disable:no-consecutive-blank-lines ordered-imports align trailing-comma enum-naming\n// tslint:disable:whitespace no-unbound-method no-trailing-whitespace\n// tslint:disable:no-unused-variable\nimport {\n\tAwaitTransactionSuccessOpts,\n\tContractFunctionObj,\n\tContractTxFunctionObj,\n\tSendTransactionOpts,\n\tBaseContract,\n\tSubscriptionManager,\n\tPromiseWithTransactionHash,\n\tmethodAbiToFunctionSignature,\n} from \"@0x/base-contract\";\nimport { schemas } from \"@0x/json-schemas\";\nimport {\n\tBlockParam,\n\tBlockRange,\n\tCallData,\n\tContractAbi,\n\tContractArtifact,\n\tDecodedLogArgs,\n\tLogWithDecodedArgs,\n\tMethodAbi,\n\tTransactionReceiptWithDecodedLogs,\n\tTxData,\n\tSupportedProvider,\n} from \"ethereum-types\";\nimport { BigNumber, classUtils, providerUtils } from \"@0x/utils\";\nimport { EventCallback, IndexedFilterValues, SimpleContractArtifact } from \"@0x/types\";\n// @ts-ignore\nimport { Web3Wrapper } from \"@0x/web3-wrapper\";\nimport { assert } from \"@0x/assert\";\nimport * as ethers from \"ethers\";\n// tslint:enable:no-unused-variable\n\nexport type AtokenEventArgs =\n\t| AtokenApprovalEventArgs\n\t| AtokenBalanceTransferEventArgs\n\t| AtokenBurnOnLiquidationEventArgs\n\t| AtokenInterestRedirectionAllowanceChangedEventArgs\n\t| AtokenInterestStreamRedirectedEventArgs\n\t| AtokenMintOnDepositEventArgs\n\t| AtokenRedeemEventArgs\n\t| AtokenRedirectedBalanceUpdatedEventArgs\n\t| AtokenTransferEventArgs;\n\nexport enum AtokenEvents {\n\tApproval = \"Approval\",\n\tBalanceTransfer = \"BalanceTransfer\",\n\tBurnOnLiquidation = \"BurnOnLiquidation\",\n\tInterestRedirectionAllowanceChanged = \"InterestRedirectionAllowanceChanged\",\n\tInterestStreamRedirected = \"InterestStreamRedirected\",\n\tMintOnDeposit = \"MintOnDeposit\",\n\tRedeem = \"Redeem\",\n\tRedirectedBalanceUpdated = \"RedirectedBalanceUpdated\",\n\tTransfer = \"Transfer\",\n}\n\nexport interface AtokenApprovalEventArgs extends DecodedLogArgs {\n\towner: string;\n\tspender: string;\n\tvalue: BigNumber;\n}\n\nexport interface AtokenBalanceTransferEventArgs extends DecodedLogArgs {\n\t_from: string;\n\t_to: string;\n\t_value: BigNumber;\n\t_fromBalanceIncrease: BigNumber;\n\t_toBalanceIncrease: BigNumber;\n\t_fromIndex: BigNumber;\n\t_toIndex: BigNumber;\n}\n\nexport interface AtokenBurnOnLiquidationEventArgs extends DecodedLogArgs {\n\t_from: string;\n\t_value: BigNumber;\n\t_fromBalanceIncrease: BigNumber;\n\t_fromIndex: BigNumber;\n}\n\nexport interface AtokenInterestRedirectionAllowanceChangedEventArgs extends DecodedLogArgs {\n\t_from: string;\n\t_to: string;\n}\n\nexport interface AtokenInterestStreamRedirectedEventArgs extends DecodedLogArgs {\n\t_from: string;\n\t_to: string;\n\t_redirectedBalance: BigNumber;\n\t_fromBalanceIncrease: BigNumber;\n\t_fromIndex: BigNumber;\n}\n\nexport interface AtokenMintOnDepositEventArgs extends DecodedLogArgs {\n\t_from: string;\n\t_value: BigNumber;\n\t_fromBalanceIncrease: BigNumber;\n\t_fromIndex: BigNumber;\n}\n\nexport interface AtokenRedeemEventArgs extends DecodedLogArgs {\n\t_from: string;\n\t_value: BigNumber;\n\t_fromBalanceIncrease: BigNumber;\n\t_fromIndex: BigNumber;\n}\n\nexport interface AtokenRedirectedBalanceUpdatedEventArgs extends DecodedLogArgs {\n\t_targetAddress: string;\n\t_targetBalanceIncrease: BigNumber;\n\t_targetIndex: BigNumber;\n\t_redirectedBalanceAdded: BigNumber;\n\t_redirectedBalanceRemoved: BigNumber;\n}\n\nexport interface AtokenTransferEventArgs extends DecodedLogArgs {\n\tfrom: string;\n\tto: string;\n\tvalue: BigNumber;\n}\n\n/* istanbul ignore next */\n// tslint:disable:no-parameter-reassignment\n// tslint:disable-next-line:class-name\nexport class AtokenContract extends BaseContract {\n\t/**\n\t * @ignore\n\t */\n\tpublic static deployedBytecode: string | undefined;\n\tpublic static contractName = \"Atoken\";\n\tprivate readonly _methodABIIndex: { [name: string]: number } = {};\n\tprivate readonly _subscriptionManager: SubscriptionManager<AtokenEventArgs, AtokenEvents>;\n\tpublic static async deployFrom0xArtifactAsync(\n\t\tartifact: ContractArtifact | SimpleContractArtifact,\n\t\tsupportedProvider: SupportedProvider,\n\t\ttxDefaults: Partial<TxData>,\n\t\tlogDecodeDependencies: { [contractName: string]: ContractArtifact | SimpleContractArtifact },\n\t\t_addressesProvider: string,\n\t\t_underlyingAsset: string,\n\t\t_underlyingAssetDecimals: number | BigNumber,\n\t\t_name: string,\n\t\t_symbol: string\n\t): Promise<AtokenContract> {\n\t\tassert.doesConformToSchema(\"txDefaults\", txDefaults, schemas.txDataSchema, [\n\t\t\tschemas.addressSchema,\n\t\t\tschemas.numberSchema,\n\t\t\tschemas.jsNumber,\n\t\t]);\n\t\tif (artifact.compilerOutput === undefined) {\n\t\t\tthrow new Error(\"Compiler output not found in the artifact file\");\n\t\t}\n\t\tconst provider = providerUtils.standardizeOrThrow(supportedProvider);\n\t\tconst bytecode = artifact.compilerOutput.evm.bytecode.object;\n\t\tconst abi = artifact.compilerOutput.abi;\n\t\tconst logDecodeDependenciesAbiOnly: { [contractName: string]: ContractAbi } = {};\n\t\tif (Object.keys(logDecodeDependencies) !== undefined) {\n\t\t\tfor (const key of Object.keys(logDecodeDependencies)) {\n\t\t\t\tlogDecodeDependenciesAbiOnly[key] = logDecodeDependencies[key].compilerOutput.abi;\n\t\t\t}\n\t\t}\n\t\treturn AtokenContract.deployAsync(\n\t\t\tbytecode,\n\t\t\tabi,\n\t\t\tprovider,\n\t\t\ttxDefaults,\n\t\t\tlogDecodeDependenciesAbiOnly,\n\t\t\t_addressesProvider,\n\t\t\t_underlyingAsset,\n\t\t\t_underlyingAssetDecimals,\n\t\t\t_name,\n\t\t\t_symbol\n\t\t);\n\t}\n\tpublic static async deployAsync(\n\t\tbytecode: string,\n\t\tabi: ContractAbi,\n\t\tsupportedProvider: SupportedProvider,\n\t\ttxDefaults: Partial<TxData>,\n\t\tlogDecodeDependencies: { [contractName: string]: ContractAbi },\n\t\t_addressesProvider: string,\n\t\t_underlyingAsset: string,\n\t\t_underlyingAssetDecimals: number | BigNumber,\n\t\t_name: string,\n\t\t_symbol: string\n\t): Promise<AtokenContract> {\n\t\tassert.isHexString(\"bytecode\", bytecode);\n\t\tassert.doesConformToSchema(\"txDefaults\", txDefaults, schemas.txDataSchema, [\n\t\t\tschemas.addressSchema,\n\t\t\tschemas.numberSchema,\n\t\t\tschemas.jsNumber,\n\t\t]);\n\t\tconst provider = providerUtils.standardizeOrThrow(supportedProvider);\n\t\tconst constructorAbi = BaseContract._lookupConstructorAbi(abi);\n\t\t[\n\t\t\t_addressesProvider,\n\t\t\t_underlyingAsset,\n\t\t\t_underlyingAssetDecimals,\n\t\t\t_name,\n\t\t\t_symbol,\n\t\t] = BaseContract._formatABIDataItemList(\n\t\t\tconstructorAbi.inputs,\n\t\t\t[_addressesProvider, _underlyingAsset, _underlyingAssetDecimals, _name, _symbol],\n\t\t\tBaseContract._bigNumberToString\n\t\t);\n\t\t// @ts-ignore\n\t\tconst iface = new ethers.utils.Interface(abi);\n\t\t// @ts-ignore\n\t\tconst deployInfo = iface.deployFunction;\n\t\tconst txData = deployInfo.encode(bytecode, [\n\t\t\t_addressesProvider,\n\t\t\t_underlyingAsset,\n\t\t\t_underlyingAssetDecimals,\n\t\t\t_name,\n\t\t\t_symbol,\n\t\t]);\n\t\tconst web3Wrapper = new Web3Wrapper(provider);\n\t\tconst txDataWithDefaults = await BaseContract._applyDefaultsToContractTxDataAsync(\n\t\t\t{\n\t\t\t\tdata: txData,\n\t\t\t\t...txDefaults,\n\t\t\t},\n\t\t\tweb3Wrapper.estimateGasAsync.bind(web3Wrapper)\n\t\t);\n\t\tconst txHash = await web3Wrapper.sendTransactionAsync(txDataWithDefaults);\n\t\tconst txReceipt = await web3Wrapper.awaitTransactionSuccessAsync(txHash);\n\t\tconst contractInstance = new AtokenContract(\n\t\t\ttxReceipt.contractAddress as string,\n\t\t\tprovider,\n\t\t\ttxDefaults,\n\t\t\tlogDecodeDependencies\n\t\t);\n\t\tcontractInstance.constructorArgs = [\n\t\t\t_addressesProvider,\n\t\t\t_underlyingAsset,\n\t\t\t_underlyingAssetDecimals,\n\t\t\t_name,\n\t\t\t_symbol,\n\t\t];\n\t\treturn contractInstance;\n\t}\n\n\t/**\n\t * @returns      The contract ABI\n\t */\n\tpublic static ABI(): ContractAbi {\n\t\tconst abi = [\n\t\t\t{\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_addressesProvider\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_underlyingAsset\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_underlyingAssetDecimals\",\n\t\t\t\t\t\ttype: \"uint8\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_name\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_symbol\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\toutputs: [],\n\t\t\t\tpayable: false,\n\t\t\t\tstateMutability: \"nonpayable\",\n\t\t\t\ttype: \"constructor\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tanonymous: false,\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"owner\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t\tindexed: true,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"spender\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t\tindexed: true,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"value\",\n\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t\tindexed: false,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: \"Approval\",\n\t\t\t\toutputs: [],\n\t\t\t\ttype: \"event\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tanonymous: false,\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_from\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t\tindexed: true,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_to\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t\tindexed: true,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_value\",\n\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t\tindexed: false,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_fromBalanceIncrease\",\n\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t\tindexed: false,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_toBalanceIncrease\",\n\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t\tindexed: false,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_fromIndex\",\n\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t\tindexed: false,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_toIndex\",\n\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t\tindexed: false,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: \"BalanceTransfer\",\n\t\t\t\toutputs: [],\n\t\t\t\ttype: \"event\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tanonymous: false,\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_from\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t\tindexed: true,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_value\",\n\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t\tindexed: false,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_fromBalanceIncrease\",\n\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t\tindexed: false,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_fromIndex\",\n\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t\tindexed: false,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: \"BurnOnLiquidation\",\n\t\t\t\toutputs: [],\n\t\t\t\ttype: \"event\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tanonymous: false,\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_from\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t\tindexed: true,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_to\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t\tindexed: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: \"InterestRedirectionAllowanceChanged\",\n\t\t\t\toutputs: [],\n\t\t\t\ttype: \"event\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tanonymous: false,\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_from\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t\tindexed: true,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_to\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t\tindexed: true,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_redirectedBalance\",\n\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t\tindexed: false,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_fromBalanceIncrease\",\n\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t\tindexed: false,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_fromIndex\",\n\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t\tindexed: false,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: \"InterestStreamRedirected\",\n\t\t\t\toutputs: [],\n\t\t\t\ttype: \"event\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tanonymous: false,\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_from\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t\tindexed: true,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_value\",\n\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t\tindexed: false,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_fromBalanceIncrease\",\n\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t\tindexed: false,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_fromIndex\",\n\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t\tindexed: false,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: \"MintOnDeposit\",\n\t\t\t\toutputs: [],\n\t\t\t\ttype: \"event\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tanonymous: false,\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_from\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t\tindexed: true,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_value\",\n\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t\tindexed: false,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_fromBalanceIncrease\",\n\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t\tindexed: false,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_fromIndex\",\n\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t\tindexed: false,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: \"Redeem\",\n\t\t\t\toutputs: [],\n\t\t\t\ttype: \"event\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tanonymous: false,\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_targetAddress\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t\tindexed: true,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_targetBalanceIncrease\",\n\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t\tindexed: false,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_targetIndex\",\n\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t\tindexed: false,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_redirectedBalanceAdded\",\n\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t\tindexed: false,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_redirectedBalanceRemoved\",\n\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t\tindexed: false,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: \"RedirectedBalanceUpdated\",\n\t\t\t\toutputs: [],\n\t\t\t\ttype: \"event\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tanonymous: false,\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"from\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t\tindexed: true,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"to\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t\tindexed: true,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"value\",\n\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t\tindexed: false,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: \"Transfer\",\n\t\t\t\toutputs: [],\n\t\t\t\ttype: \"event\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tconstant: true,\n\t\t\t\tinputs: [],\n\t\t\t\tname: \"UINT_MAX_VALUE\",\n\t\t\t\toutputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"\",\n\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tpayable: false,\n\t\t\t\tstateMutability: \"view\",\n\t\t\t\ttype: \"function\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tconstant: true,\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"owner\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"spender\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: \"allowance\",\n\t\t\t\toutputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"\",\n\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tpayable: false,\n\t\t\t\tstateMutability: \"view\",\n\t\t\t\ttype: \"function\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tconstant: false,\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"spender\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"value\",\n\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: \"approve\",\n\t\t\t\toutputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"\",\n\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tpayable: false,\n\t\t\t\tstateMutability: \"nonpayable\",\n\t\t\t\ttype: \"function\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tconstant: true,\n\t\t\t\tinputs: [],\n\t\t\t\tname: \"decimals\",\n\t\t\t\toutputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"\",\n\t\t\t\t\t\ttype: \"uint8\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tpayable: false,\n\t\t\t\tstateMutability: \"view\",\n\t\t\t\ttype: \"function\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tconstant: false,\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"spender\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"subtractedValue\",\n\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: \"decreaseAllowance\",\n\t\t\t\toutputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"\",\n\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tpayable: false,\n\t\t\t\tstateMutability: \"nonpayable\",\n\t\t\t\ttype: \"function\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tconstant: false,\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"spender\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"addedValue\",\n\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: \"increaseAllowance\",\n\t\t\t\toutputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"\",\n\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tpayable: false,\n\t\t\t\tstateMutability: \"nonpayable\",\n\t\t\t\ttype: \"function\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tconstant: true,\n\t\t\t\tinputs: [],\n\t\t\t\tname: \"name\",\n\t\t\t\toutputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tpayable: false,\n\t\t\t\tstateMutability: \"view\",\n\t\t\t\ttype: \"function\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tconstant: true,\n\t\t\t\tinputs: [],\n\t\t\t\tname: \"symbol\",\n\t\t\t\toutputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tpayable: false,\n\t\t\t\tstateMutability: \"view\",\n\t\t\t\ttype: \"function\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tconstant: false,\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"recipient\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"amount\",\n\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: \"transfer\",\n\t\t\t\toutputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"\",\n\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tpayable: false,\n\t\t\t\tstateMutability: \"nonpayable\",\n\t\t\t\ttype: \"function\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tconstant: false,\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"sender\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"recipient\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"amount\",\n\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: \"transferFrom\",\n\t\t\t\toutputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"\",\n\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tpayable: false,\n\t\t\t\tstateMutability: \"nonpayable\",\n\t\t\t\ttype: \"function\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tconstant: true,\n\t\t\t\tinputs: [],\n\t\t\t\tname: \"underlyingAssetAddress\",\n\t\t\t\toutputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tpayable: false,\n\t\t\t\tstateMutability: \"view\",\n\t\t\t\ttype: \"function\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tconstant: false,\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_to\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: \"redirectInterestStream\",\n\t\t\t\toutputs: [],\n\t\t\t\tpayable: false,\n\t\t\t\tstateMutability: \"nonpayable\",\n\t\t\t\ttype: \"function\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tconstant: false,\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_from\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_to\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: \"redirectInterestStreamOf\",\n\t\t\t\toutputs: [],\n\t\t\t\tpayable: false,\n\t\t\t\tstateMutability: \"nonpayable\",\n\t\t\t\ttype: \"function\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tconstant: false,\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_to\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: \"allowInterestRedirectionTo\",\n\t\t\t\toutputs: [],\n\t\t\t\tpayable: false,\n\t\t\t\tstateMutability: \"nonpayable\",\n\t\t\t\ttype: \"function\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tconstant: false,\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_amount\",\n\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: \"redeem\",\n\t\t\t\toutputs: [],\n\t\t\t\tpayable: false,\n\t\t\t\tstateMutability: \"nonpayable\",\n\t\t\t\ttype: \"function\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tconstant: false,\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_account\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_amount\",\n\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: \"mintOnDeposit\",\n\t\t\t\toutputs: [],\n\t\t\t\tpayable: false,\n\t\t\t\tstateMutability: \"nonpayable\",\n\t\t\t\ttype: \"function\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tconstant: false,\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_account\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_value\",\n\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: \"burnOnLiquidation\",\n\t\t\t\toutputs: [],\n\t\t\t\tpayable: false,\n\t\t\t\tstateMutability: \"nonpayable\",\n\t\t\t\ttype: \"function\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tconstant: false,\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_from\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_to\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_value\",\n\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: \"transferOnLiquidation\",\n\t\t\t\toutputs: [],\n\t\t\t\tpayable: false,\n\t\t\t\tstateMutability: \"nonpayable\",\n\t\t\t\ttype: \"function\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tconstant: true,\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_user\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: \"balanceOf\",\n\t\t\t\toutputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"\",\n\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tpayable: false,\n\t\t\t\tstateMutability: \"view\",\n\t\t\t\ttype: \"function\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tconstant: true,\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_user\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: \"principalBalanceOf\",\n\t\t\t\toutputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"\",\n\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tpayable: false,\n\t\t\t\tstateMutability: \"view\",\n\t\t\t\ttype: \"function\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tconstant: true,\n\t\t\t\tinputs: [],\n\t\t\t\tname: \"totalSupply\",\n\t\t\t\toutputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"\",\n\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tpayable: false,\n\t\t\t\tstateMutability: \"view\",\n\t\t\t\ttype: \"function\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tconstant: true,\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_user\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_amount\",\n\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: \"isTransferAllowed\",\n\t\t\t\toutputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"\",\n\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tpayable: false,\n\t\t\t\tstateMutability: \"view\",\n\t\t\t\ttype: \"function\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tconstant: true,\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_user\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: \"getUserIndex\",\n\t\t\t\toutputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"\",\n\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tpayable: false,\n\t\t\t\tstateMutability: \"view\",\n\t\t\t\ttype: \"function\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tconstant: true,\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_user\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: \"getInterestRedirectionAddress\",\n\t\t\t\toutputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tpayable: false,\n\t\t\t\tstateMutability: \"view\",\n\t\t\t\ttype: \"function\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tconstant: true,\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_user\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: \"getRedirectedBalance\",\n\t\t\t\toutputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"\",\n\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tpayable: false,\n\t\t\t\tstateMutability: \"view\",\n\t\t\t\ttype: \"function\",\n\t\t\t},\n\t\t] as ContractAbi;\n\t\treturn abi;\n\t}\n\n\tpublic getFunctionSignature(methodName: string): string {\n\t\tconst index = this._methodABIIndex[methodName];\n\t\tconst methodAbi = AtokenContract.ABI()[index] as MethodAbi; // tslint:disable-line:no-unnecessary-type-assertion\n\t\tconst functionSignature = methodAbiToFunctionSignature(methodAbi);\n\t\treturn functionSignature;\n\t}\n\tpublic getABIDecodedTransactionData<T>(methodName: string, callData: string): T {\n\t\tconst functionSignature = this.getFunctionSignature(methodName);\n\t\tconst self = (this as any) as AtokenContract;\n\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\tconst abiDecodedCallData = abiEncoder.strictDecode<T>(callData);\n\t\treturn abiDecodedCallData;\n\t}\n\tpublic getABIDecodedReturnData<T>(methodName: string, callData: string): T {\n\t\tconst functionSignature = this.getFunctionSignature(methodName);\n\t\tconst self = (this as any) as AtokenContract;\n\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\tconst abiDecodedCallData = abiEncoder.strictDecodeReturnValue<T>(callData);\n\t\treturn abiDecodedCallData;\n\t}\n\tpublic getSelector(methodName: string): string {\n\t\tconst functionSignature = this.getFunctionSignature(methodName);\n\t\tconst self = (this as any) as AtokenContract;\n\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\treturn abiEncoder.getSelector();\n\t}\n\n\tpublic UINT_MAX_VALUE(): ContractFunctionObj<BigNumber> {\n\t\tconst self = (this as any) as AtokenContract;\n\t\tconst functionSignature = \"UINT_MAX_VALUE()\";\n\n\t\treturn {\n\t\t\tasync callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber> {\n\t\t\t\tBaseContract._assertCallParams(callData, defaultBlock);\n\t\t\t\tconst rawCallResult = await self._performCallAsync(\n\t\t\t\t\t{ ...callData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tdefaultBlock\n\t\t\t\t);\n\t\t\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\t\t\treturn abiEncoder.strictDecodeReturnValue<BigNumber>(rawCallResult);\n\t\t\t},\n\t\t\tgetABIEncodedTransactionData(): string {\n\t\t\t\treturn self._strictEncodeArguments(functionSignature, []);\n\t\t\t},\n\t\t};\n\t}\n\tpublic allowance(owner: string, spender: string): ContractFunctionObj<BigNumber> {\n\t\tconst self = (this as any) as AtokenContract;\n\t\tassert.isString(\"owner\", owner);\n\t\tassert.isString(\"spender\", spender);\n\t\tconst functionSignature = \"allowance(address,address)\";\n\n\t\treturn {\n\t\t\tasync callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber> {\n\t\t\t\tBaseContract._assertCallParams(callData, defaultBlock);\n\t\t\t\tconst rawCallResult = await self._performCallAsync(\n\t\t\t\t\t{ ...callData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tdefaultBlock\n\t\t\t\t);\n\t\t\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\t\t\treturn abiEncoder.strictDecodeReturnValue<BigNumber>(rawCallResult);\n\t\t\t},\n\t\t\tgetABIEncodedTransactionData(): string {\n\t\t\t\treturn self._strictEncodeArguments(functionSignature, [owner.toLowerCase(), spender.toLowerCase()]);\n\t\t\t},\n\t\t};\n\t}\n\tpublic approve(spender: string, value: BigNumber): ContractTxFunctionObj<boolean> {\n\t\tconst self = (this as any) as AtokenContract;\n\t\tassert.isString(\"spender\", spender);\n\t\tassert.isBigNumber(\"value\", value);\n\t\tconst functionSignature = \"approve(address,uint256)\";\n\n\t\treturn {\n\t\t\tasync sendTransactionAsync(\n\t\t\t\ttxData?: Partial<TxData> | undefined,\n\t\t\t\topts: SendTransactionOpts = { shouldValidate: true }\n\t\t\t): Promise<string> {\n\t\t\t\tconst txDataWithDefaults = await self._applyDefaultsToTxDataAsync(\n\t\t\t\t\t{ ...txData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tthis.estimateGasAsync.bind(this)\n\t\t\t\t);\n\t\t\t\tif (opts.shouldValidate !== false) {\n\t\t\t\t\tawait this.callAsync(txDataWithDefaults);\n\t\t\t\t}\n\t\t\t\treturn self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);\n\t\t\t},\n\t\t\tawaitTransactionSuccessAsync(\n\t\t\t\ttxData?: Partial<TxData>,\n\t\t\t\topts: AwaitTransactionSuccessOpts = { shouldValidate: true }\n\t\t\t): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {\n\t\t\t\treturn self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);\n\t\t\t},\n\t\t\tasync estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {\n\t\t\t\tconst txDataWithDefaults = await self._applyDefaultsToTxDataAsync({\n\t\t\t\t\t...txData,\n\t\t\t\t\tdata: this.getABIEncodedTransactionData(),\n\t\t\t\t});\n\t\t\t\treturn self._web3Wrapper.estimateGasAsync(txDataWithDefaults);\n\t\t\t},\n\t\t\tasync callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<boolean> {\n\t\t\t\tBaseContract._assertCallParams(callData, defaultBlock);\n\t\t\t\tconst rawCallResult = await self._performCallAsync(\n\t\t\t\t\t{ ...callData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tdefaultBlock\n\t\t\t\t);\n\t\t\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\t\t\treturn abiEncoder.strictDecodeReturnValue<boolean>(rawCallResult);\n\t\t\t},\n\t\t\tgetABIEncodedTransactionData(): string {\n\t\t\t\treturn self._strictEncodeArguments(functionSignature, [spender.toLowerCase(), value]);\n\t\t\t},\n\t\t};\n\t}\n\tpublic decimals(): ContractFunctionObj<BigNumber> {\n\t\tconst self = (this as any) as AtokenContract;\n\t\tconst functionSignature = \"decimals()\";\n\n\t\treturn {\n\t\t\tasync callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber> {\n\t\t\t\tBaseContract._assertCallParams(callData, defaultBlock);\n\t\t\t\tconst rawCallResult = await self._performCallAsync(\n\t\t\t\t\t{ ...callData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tdefaultBlock\n\t\t\t\t);\n\t\t\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\t\t\treturn abiEncoder.strictDecodeReturnValue<BigNumber>(rawCallResult);\n\t\t\t},\n\t\t\tgetABIEncodedTransactionData(): string {\n\t\t\t\treturn self._strictEncodeArguments(functionSignature, []);\n\t\t\t},\n\t\t};\n\t}\n\tpublic decreaseAllowance(spender: string, subtractedValue: BigNumber): ContractTxFunctionObj<boolean> {\n\t\tconst self = (this as any) as AtokenContract;\n\t\tassert.isString(\"spender\", spender);\n\t\tassert.isBigNumber(\"subtractedValue\", subtractedValue);\n\t\tconst functionSignature = \"decreaseAllowance(address,uint256)\";\n\n\t\treturn {\n\t\t\tasync sendTransactionAsync(\n\t\t\t\ttxData?: Partial<TxData> | undefined,\n\t\t\t\topts: SendTransactionOpts = { shouldValidate: true }\n\t\t\t): Promise<string> {\n\t\t\t\tconst txDataWithDefaults = await self._applyDefaultsToTxDataAsync(\n\t\t\t\t\t{ ...txData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tthis.estimateGasAsync.bind(this)\n\t\t\t\t);\n\t\t\t\tif (opts.shouldValidate !== false) {\n\t\t\t\t\tawait this.callAsync(txDataWithDefaults);\n\t\t\t\t}\n\t\t\t\treturn self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);\n\t\t\t},\n\t\t\tawaitTransactionSuccessAsync(\n\t\t\t\ttxData?: Partial<TxData>,\n\t\t\t\topts: AwaitTransactionSuccessOpts = { shouldValidate: true }\n\t\t\t): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {\n\t\t\t\treturn self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);\n\t\t\t},\n\t\t\tasync estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {\n\t\t\t\tconst txDataWithDefaults = await self._applyDefaultsToTxDataAsync({\n\t\t\t\t\t...txData,\n\t\t\t\t\tdata: this.getABIEncodedTransactionData(),\n\t\t\t\t});\n\t\t\t\treturn self._web3Wrapper.estimateGasAsync(txDataWithDefaults);\n\t\t\t},\n\t\t\tasync callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<boolean> {\n\t\t\t\tBaseContract._assertCallParams(callData, defaultBlock);\n\t\t\t\tconst rawCallResult = await self._performCallAsync(\n\t\t\t\t\t{ ...callData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tdefaultBlock\n\t\t\t\t);\n\t\t\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\t\t\treturn abiEncoder.strictDecodeReturnValue<boolean>(rawCallResult);\n\t\t\t},\n\t\t\tgetABIEncodedTransactionData(): string {\n\t\t\t\treturn self._strictEncodeArguments(functionSignature, [spender.toLowerCase(), subtractedValue]);\n\t\t\t},\n\t\t};\n\t}\n\tpublic increaseAllowance(spender: string, addedValue: BigNumber): ContractTxFunctionObj<boolean> {\n\t\tconst self = (this as any) as AtokenContract;\n\t\tassert.isString(\"spender\", spender);\n\t\tassert.isBigNumber(\"addedValue\", addedValue);\n\t\tconst functionSignature = \"increaseAllowance(address,uint256)\";\n\n\t\treturn {\n\t\t\tasync sendTransactionAsync(\n\t\t\t\ttxData?: Partial<TxData> | undefined,\n\t\t\t\topts: SendTransactionOpts = { shouldValidate: true }\n\t\t\t): Promise<string> {\n\t\t\t\tconst txDataWithDefaults = await self._applyDefaultsToTxDataAsync(\n\t\t\t\t\t{ ...txData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tthis.estimateGasAsync.bind(this)\n\t\t\t\t);\n\t\t\t\tif (opts.shouldValidate !== false) {\n\t\t\t\t\tawait this.callAsync(txDataWithDefaults);\n\t\t\t\t}\n\t\t\t\treturn self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);\n\t\t\t},\n\t\t\tawaitTransactionSuccessAsync(\n\t\t\t\ttxData?: Partial<TxData>,\n\t\t\t\topts: AwaitTransactionSuccessOpts = { shouldValidate: true }\n\t\t\t): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {\n\t\t\t\treturn self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);\n\t\t\t},\n\t\t\tasync estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {\n\t\t\t\tconst txDataWithDefaults = await self._applyDefaultsToTxDataAsync({\n\t\t\t\t\t...txData,\n\t\t\t\t\tdata: this.getABIEncodedTransactionData(),\n\t\t\t\t});\n\t\t\t\treturn self._web3Wrapper.estimateGasAsync(txDataWithDefaults);\n\t\t\t},\n\t\t\tasync callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<boolean> {\n\t\t\t\tBaseContract._assertCallParams(callData, defaultBlock);\n\t\t\t\tconst rawCallResult = await self._performCallAsync(\n\t\t\t\t\t{ ...callData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tdefaultBlock\n\t\t\t\t);\n\t\t\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\t\t\treturn abiEncoder.strictDecodeReturnValue<boolean>(rawCallResult);\n\t\t\t},\n\t\t\tgetABIEncodedTransactionData(): string {\n\t\t\t\treturn self._strictEncodeArguments(functionSignature, [spender.toLowerCase(), addedValue]);\n\t\t\t},\n\t\t};\n\t}\n\tpublic name(): ContractFunctionObj<string> {\n\t\tconst self = (this as any) as AtokenContract;\n\t\tconst functionSignature = \"name()\";\n\n\t\treturn {\n\t\t\tasync callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<string> {\n\t\t\t\tBaseContract._assertCallParams(callData, defaultBlock);\n\t\t\t\tconst rawCallResult = await self._performCallAsync(\n\t\t\t\t\t{ ...callData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tdefaultBlock\n\t\t\t\t);\n\t\t\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\t\t\treturn abiEncoder.strictDecodeReturnValue<string>(rawCallResult);\n\t\t\t},\n\t\t\tgetABIEncodedTransactionData(): string {\n\t\t\t\treturn self._strictEncodeArguments(functionSignature, []);\n\t\t\t},\n\t\t};\n\t}\n\tpublic symbol(): ContractFunctionObj<string> {\n\t\tconst self = (this as any) as AtokenContract;\n\t\tconst functionSignature = \"symbol()\";\n\n\t\treturn {\n\t\t\tasync callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<string> {\n\t\t\t\tBaseContract._assertCallParams(callData, defaultBlock);\n\t\t\t\tconst rawCallResult = await self._performCallAsync(\n\t\t\t\t\t{ ...callData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tdefaultBlock\n\t\t\t\t);\n\t\t\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\t\t\treturn abiEncoder.strictDecodeReturnValue<string>(rawCallResult);\n\t\t\t},\n\t\t\tgetABIEncodedTransactionData(): string {\n\t\t\t\treturn self._strictEncodeArguments(functionSignature, []);\n\t\t\t},\n\t\t};\n\t}\n\tpublic transfer(recipient: string, amount: BigNumber): ContractTxFunctionObj<boolean> {\n\t\tconst self = (this as any) as AtokenContract;\n\t\tassert.isString(\"recipient\", recipient);\n\t\tassert.isBigNumber(\"amount\", amount);\n\t\tconst functionSignature = \"transfer(address,uint256)\";\n\n\t\treturn {\n\t\t\tasync sendTransactionAsync(\n\t\t\t\ttxData?: Partial<TxData> | undefined,\n\t\t\t\topts: SendTransactionOpts = { shouldValidate: true }\n\t\t\t): Promise<string> {\n\t\t\t\tconst txDataWithDefaults = await self._applyDefaultsToTxDataAsync(\n\t\t\t\t\t{ ...txData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tthis.estimateGasAsync.bind(this)\n\t\t\t\t);\n\t\t\t\tif (opts.shouldValidate !== false) {\n\t\t\t\t\tawait this.callAsync(txDataWithDefaults);\n\t\t\t\t}\n\t\t\t\treturn self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);\n\t\t\t},\n\t\t\tawaitTransactionSuccessAsync(\n\t\t\t\ttxData?: Partial<TxData>,\n\t\t\t\topts: AwaitTransactionSuccessOpts = { shouldValidate: true }\n\t\t\t): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {\n\t\t\t\treturn self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);\n\t\t\t},\n\t\t\tasync estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {\n\t\t\t\tconst txDataWithDefaults = await self._applyDefaultsToTxDataAsync({\n\t\t\t\t\t...txData,\n\t\t\t\t\tdata: this.getABIEncodedTransactionData(),\n\t\t\t\t});\n\t\t\t\treturn self._web3Wrapper.estimateGasAsync(txDataWithDefaults);\n\t\t\t},\n\t\t\tasync callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<boolean> {\n\t\t\t\tBaseContract._assertCallParams(callData, defaultBlock);\n\t\t\t\tconst rawCallResult = await self._performCallAsync(\n\t\t\t\t\t{ ...callData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tdefaultBlock\n\t\t\t\t);\n\t\t\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\t\t\treturn abiEncoder.strictDecodeReturnValue<boolean>(rawCallResult);\n\t\t\t},\n\t\t\tgetABIEncodedTransactionData(): string {\n\t\t\t\treturn self._strictEncodeArguments(functionSignature, [recipient.toLowerCase(), amount]);\n\t\t\t},\n\t\t};\n\t}\n\tpublic transferFrom(sender: string, recipient: string, amount: BigNumber): ContractTxFunctionObj<boolean> {\n\t\tconst self = (this as any) as AtokenContract;\n\t\tassert.isString(\"sender\", sender);\n\t\tassert.isString(\"recipient\", recipient);\n\t\tassert.isBigNumber(\"amount\", amount);\n\t\tconst functionSignature = \"transferFrom(address,address,uint256)\";\n\n\t\treturn {\n\t\t\tasync sendTransactionAsync(\n\t\t\t\ttxData?: Partial<TxData> | undefined,\n\t\t\t\topts: SendTransactionOpts = { shouldValidate: true }\n\t\t\t): Promise<string> {\n\t\t\t\tconst txDataWithDefaults = await self._applyDefaultsToTxDataAsync(\n\t\t\t\t\t{ ...txData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tthis.estimateGasAsync.bind(this)\n\t\t\t\t);\n\t\t\t\tif (opts.shouldValidate !== false) {\n\t\t\t\t\tawait this.callAsync(txDataWithDefaults);\n\t\t\t\t}\n\t\t\t\treturn self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);\n\t\t\t},\n\t\t\tawaitTransactionSuccessAsync(\n\t\t\t\ttxData?: Partial<TxData>,\n\t\t\t\topts: AwaitTransactionSuccessOpts = { shouldValidate: true }\n\t\t\t): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {\n\t\t\t\treturn self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);\n\t\t\t},\n\t\t\tasync estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {\n\t\t\t\tconst txDataWithDefaults = await self._applyDefaultsToTxDataAsync({\n\t\t\t\t\t...txData,\n\t\t\t\t\tdata: this.getABIEncodedTransactionData(),\n\t\t\t\t});\n\t\t\t\treturn self._web3Wrapper.estimateGasAsync(txDataWithDefaults);\n\t\t\t},\n\t\t\tasync callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<boolean> {\n\t\t\t\tBaseContract._assertCallParams(callData, defaultBlock);\n\t\t\t\tconst rawCallResult = await self._performCallAsync(\n\t\t\t\t\t{ ...callData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tdefaultBlock\n\t\t\t\t);\n\t\t\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\t\t\treturn abiEncoder.strictDecodeReturnValue<boolean>(rawCallResult);\n\t\t\t},\n\t\t\tgetABIEncodedTransactionData(): string {\n\t\t\t\treturn self._strictEncodeArguments(functionSignature, [\n\t\t\t\t\tsender.toLowerCase(),\n\t\t\t\t\trecipient.toLowerCase(),\n\t\t\t\t\tamount,\n\t\t\t\t]);\n\t\t\t},\n\t\t};\n\t}\n\tpublic underlyingAssetAddress(): ContractFunctionObj<string> {\n\t\tconst self = (this as any) as AtokenContract;\n\t\tconst functionSignature = \"underlyingAssetAddress()\";\n\n\t\treturn {\n\t\t\tasync callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<string> {\n\t\t\t\tBaseContract._assertCallParams(callData, defaultBlock);\n\t\t\t\tconst rawCallResult = await self._performCallAsync(\n\t\t\t\t\t{ ...callData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tdefaultBlock\n\t\t\t\t);\n\t\t\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\t\t\treturn abiEncoder.strictDecodeReturnValue<string>(rawCallResult);\n\t\t\t},\n\t\t\tgetABIEncodedTransactionData(): string {\n\t\t\t\treturn self._strictEncodeArguments(functionSignature, []);\n\t\t\t},\n\t\t};\n\t}\n\tpublic redirectInterestStream(_to: string): ContractTxFunctionObj<void> {\n\t\tconst self = (this as any) as AtokenContract;\n\t\tassert.isString(\"_to\", _to);\n\t\tconst functionSignature = \"redirectInterestStream(address)\";\n\n\t\treturn {\n\t\t\tasync sendTransactionAsync(\n\t\t\t\ttxData?: Partial<TxData> | undefined,\n\t\t\t\topts: SendTransactionOpts = { shouldValidate: true }\n\t\t\t): Promise<string> {\n\t\t\t\tconst txDataWithDefaults = await self._applyDefaultsToTxDataAsync(\n\t\t\t\t\t{ ...txData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tthis.estimateGasAsync.bind(this)\n\t\t\t\t);\n\t\t\t\tif (opts.shouldValidate !== false) {\n\t\t\t\t\tawait this.callAsync(txDataWithDefaults);\n\t\t\t\t}\n\t\t\t\treturn self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);\n\t\t\t},\n\t\t\tawaitTransactionSuccessAsync(\n\t\t\t\ttxData?: Partial<TxData>,\n\t\t\t\topts: AwaitTransactionSuccessOpts = { shouldValidate: true }\n\t\t\t): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {\n\t\t\t\treturn self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);\n\t\t\t},\n\t\t\tasync estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {\n\t\t\t\tconst txDataWithDefaults = await self._applyDefaultsToTxDataAsync({\n\t\t\t\t\t...txData,\n\t\t\t\t\tdata: this.getABIEncodedTransactionData(),\n\t\t\t\t});\n\t\t\t\treturn self._web3Wrapper.estimateGasAsync(txDataWithDefaults);\n\t\t\t},\n\t\t\tasync callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<void> {\n\t\t\t\tBaseContract._assertCallParams(callData, defaultBlock);\n\t\t\t\tconst rawCallResult = await self._performCallAsync(\n\t\t\t\t\t{ ...callData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tdefaultBlock\n\t\t\t\t);\n\t\t\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\t\t\treturn abiEncoder.strictDecodeReturnValue<void>(rawCallResult);\n\t\t\t},\n\t\t\tgetABIEncodedTransactionData(): string {\n\t\t\t\treturn self._strictEncodeArguments(functionSignature, [_to.toLowerCase()]);\n\t\t\t},\n\t\t};\n\t}\n\tpublic redirectInterestStreamOf(_from: string, _to: string): ContractTxFunctionObj<void> {\n\t\tconst self = (this as any) as AtokenContract;\n\t\tassert.isString(\"_from\", _from);\n\t\tassert.isString(\"_to\", _to);\n\t\tconst functionSignature = \"redirectInterestStreamOf(address,address)\";\n\n\t\treturn {\n\t\t\tasync sendTransactionAsync(\n\t\t\t\ttxData?: Partial<TxData> | undefined,\n\t\t\t\topts: SendTransactionOpts = { shouldValidate: true }\n\t\t\t): Promise<string> {\n\t\t\t\tconst txDataWithDefaults = await self._applyDefaultsToTxDataAsync(\n\t\t\t\t\t{ ...txData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tthis.estimateGasAsync.bind(this)\n\t\t\t\t);\n\t\t\t\tif (opts.shouldValidate !== false) {\n\t\t\t\t\tawait this.callAsync(txDataWithDefaults);\n\t\t\t\t}\n\t\t\t\treturn self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);\n\t\t\t},\n\t\t\tawaitTransactionSuccessAsync(\n\t\t\t\ttxData?: Partial<TxData>,\n\t\t\t\topts: AwaitTransactionSuccessOpts = { shouldValidate: true }\n\t\t\t): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {\n\t\t\t\treturn self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);\n\t\t\t},\n\t\t\tasync estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {\n\t\t\t\tconst txDataWithDefaults = await self._applyDefaultsToTxDataAsync({\n\t\t\t\t\t...txData,\n\t\t\t\t\tdata: this.getABIEncodedTransactionData(),\n\t\t\t\t});\n\t\t\t\treturn self._web3Wrapper.estimateGasAsync(txDataWithDefaults);\n\t\t\t},\n\t\t\tasync callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<void> {\n\t\t\t\tBaseContract._assertCallParams(callData, defaultBlock);\n\t\t\t\tconst rawCallResult = await self._performCallAsync(\n\t\t\t\t\t{ ...callData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tdefaultBlock\n\t\t\t\t);\n\t\t\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\t\t\treturn abiEncoder.strictDecodeReturnValue<void>(rawCallResult);\n\t\t\t},\n\t\t\tgetABIEncodedTransactionData(): string {\n\t\t\t\treturn self._strictEncodeArguments(functionSignature, [_from.toLowerCase(), _to.toLowerCase()]);\n\t\t\t},\n\t\t};\n\t}\n\tpublic allowInterestRedirectionTo(_to: string): ContractTxFunctionObj<void> {\n\t\tconst self = (this as any) as AtokenContract;\n\t\tassert.isString(\"_to\", _to);\n\t\tconst functionSignature = \"allowInterestRedirectionTo(address)\";\n\n\t\treturn {\n\t\t\tasync sendTransactionAsync(\n\t\t\t\ttxData?: Partial<TxData> | undefined,\n\t\t\t\topts: SendTransactionOpts = { shouldValidate: true }\n\t\t\t): Promise<string> {\n\t\t\t\tconst txDataWithDefaults = await self._applyDefaultsToTxDataAsync(\n\t\t\t\t\t{ ...txData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tthis.estimateGasAsync.bind(this)\n\t\t\t\t);\n\t\t\t\tif (opts.shouldValidate !== false) {\n\t\t\t\t\tawait this.callAsync(txDataWithDefaults);\n\t\t\t\t}\n\t\t\t\treturn self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);\n\t\t\t},\n\t\t\tawaitTransactionSuccessAsync(\n\t\t\t\ttxData?: Partial<TxData>,\n\t\t\t\topts: AwaitTransactionSuccessOpts = { shouldValidate: true }\n\t\t\t): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {\n\t\t\t\treturn self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);\n\t\t\t},\n\t\t\tasync estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {\n\t\t\t\tconst txDataWithDefaults = await self._applyDefaultsToTxDataAsync({\n\t\t\t\t\t...txData,\n\t\t\t\t\tdata: this.getABIEncodedTransactionData(),\n\t\t\t\t});\n\t\t\t\treturn self._web3Wrapper.estimateGasAsync(txDataWithDefaults);\n\t\t\t},\n\t\t\tasync callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<void> {\n\t\t\t\tBaseContract._assertCallParams(callData, defaultBlock);\n\t\t\t\tconst rawCallResult = await self._performCallAsync(\n\t\t\t\t\t{ ...callData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tdefaultBlock\n\t\t\t\t);\n\t\t\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\t\t\treturn abiEncoder.strictDecodeReturnValue<void>(rawCallResult);\n\t\t\t},\n\t\t\tgetABIEncodedTransactionData(): string {\n\t\t\t\treturn self._strictEncodeArguments(functionSignature, [_to.toLowerCase()]);\n\t\t\t},\n\t\t};\n\t}\n\tpublic redeem(_amount: BigNumber): ContractTxFunctionObj<void> {\n\t\tconst self = (this as any) as AtokenContract;\n\t\tassert.isBigNumber(\"_amount\", _amount);\n\t\tconst functionSignature = \"redeem(uint256)\";\n\n\t\treturn {\n\t\t\tasync sendTransactionAsync(\n\t\t\t\ttxData?: Partial<TxData> | undefined,\n\t\t\t\topts: SendTransactionOpts = { shouldValidate: true }\n\t\t\t): Promise<string> {\n\t\t\t\tconst txDataWithDefaults = await self._applyDefaultsToTxDataAsync(\n\t\t\t\t\t{ ...txData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tthis.estimateGasAsync.bind(this)\n\t\t\t\t);\n\t\t\t\tif (opts.shouldValidate !== false) {\n\t\t\t\t\tawait this.callAsync(txDataWithDefaults);\n\t\t\t\t}\n\t\t\t\treturn self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);\n\t\t\t},\n\t\t\tawaitTransactionSuccessAsync(\n\t\t\t\ttxData?: Partial<TxData>,\n\t\t\t\topts: AwaitTransactionSuccessOpts = { shouldValidate: true }\n\t\t\t): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {\n\t\t\t\treturn self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);\n\t\t\t},\n\t\t\tasync estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {\n\t\t\t\tconst txDataWithDefaults = await self._applyDefaultsToTxDataAsync({\n\t\t\t\t\t...txData,\n\t\t\t\t\tdata: this.getABIEncodedTransactionData(),\n\t\t\t\t});\n\t\t\t\treturn self._web3Wrapper.estimateGasAsync(txDataWithDefaults);\n\t\t\t},\n\t\t\tasync callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<void> {\n\t\t\t\tBaseContract._assertCallParams(callData, defaultBlock);\n\t\t\t\tconst rawCallResult = await self._performCallAsync(\n\t\t\t\t\t{ ...callData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tdefaultBlock\n\t\t\t\t);\n\t\t\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\t\t\treturn abiEncoder.strictDecodeReturnValue<void>(rawCallResult);\n\t\t\t},\n\t\t\tgetABIEncodedTransactionData(): string {\n\t\t\t\treturn self._strictEncodeArguments(functionSignature, [_amount]);\n\t\t\t},\n\t\t};\n\t}\n\tpublic mintOnDeposit(_account: string, _amount: BigNumber): ContractTxFunctionObj<void> {\n\t\tconst self = (this as any) as AtokenContract;\n\t\tassert.isString(\"_account\", _account);\n\t\tassert.isBigNumber(\"_amount\", _amount);\n\t\tconst functionSignature = \"mintOnDeposit(address,uint256)\";\n\n\t\treturn {\n\t\t\tasync sendTransactionAsync(\n\t\t\t\ttxData?: Partial<TxData> | undefined,\n\t\t\t\topts: SendTransactionOpts = { shouldValidate: true }\n\t\t\t): Promise<string> {\n\t\t\t\tconst txDataWithDefaults = await self._applyDefaultsToTxDataAsync(\n\t\t\t\t\t{ ...txData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tthis.estimateGasAsync.bind(this)\n\t\t\t\t);\n\t\t\t\tif (opts.shouldValidate !== false) {\n\t\t\t\t\tawait this.callAsync(txDataWithDefaults);\n\t\t\t\t}\n\t\t\t\treturn self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);\n\t\t\t},\n\t\t\tawaitTransactionSuccessAsync(\n\t\t\t\ttxData?: Partial<TxData>,\n\t\t\t\topts: AwaitTransactionSuccessOpts = { shouldValidate: true }\n\t\t\t): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {\n\t\t\t\treturn self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);\n\t\t\t},\n\t\t\tasync estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {\n\t\t\t\tconst txDataWithDefaults = await self._applyDefaultsToTxDataAsync({\n\t\t\t\t\t...txData,\n\t\t\t\t\tdata: this.getABIEncodedTransactionData(),\n\t\t\t\t});\n\t\t\t\treturn self._web3Wrapper.estimateGasAsync(txDataWithDefaults);\n\t\t\t},\n\t\t\tasync callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<void> {\n\t\t\t\tBaseContract._assertCallParams(callData, defaultBlock);\n\t\t\t\tconst rawCallResult = await self._performCallAsync(\n\t\t\t\t\t{ ...callData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tdefaultBlock\n\t\t\t\t);\n\t\t\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\t\t\treturn abiEncoder.strictDecodeReturnValue<void>(rawCallResult);\n\t\t\t},\n\t\t\tgetABIEncodedTransactionData(): string {\n\t\t\t\treturn self._strictEncodeArguments(functionSignature, [_account.toLowerCase(), _amount]);\n\t\t\t},\n\t\t};\n\t}\n\tpublic burnOnLiquidation(_account: string, _value: BigNumber): ContractTxFunctionObj<void> {\n\t\tconst self = (this as any) as AtokenContract;\n\t\tassert.isString(\"_account\", _account);\n\t\tassert.isBigNumber(\"_value\", _value);\n\t\tconst functionSignature = \"burnOnLiquidation(address,uint256)\";\n\n\t\treturn {\n\t\t\tasync sendTransactionAsync(\n\t\t\t\ttxData?: Partial<TxData> | undefined,\n\t\t\t\topts: SendTransactionOpts = { shouldValidate: true }\n\t\t\t): Promise<string> {\n\t\t\t\tconst txDataWithDefaults = await self._applyDefaultsToTxDataAsync(\n\t\t\t\t\t{ ...txData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tthis.estimateGasAsync.bind(this)\n\t\t\t\t);\n\t\t\t\tif (opts.shouldValidate !== false) {\n\t\t\t\t\tawait this.callAsync(txDataWithDefaults);\n\t\t\t\t}\n\t\t\t\treturn self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);\n\t\t\t},\n\t\t\tawaitTransactionSuccessAsync(\n\t\t\t\ttxData?: Partial<TxData>,\n\t\t\t\topts: AwaitTransactionSuccessOpts = { shouldValidate: true }\n\t\t\t): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {\n\t\t\t\treturn self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);\n\t\t\t},\n\t\t\tasync estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {\n\t\t\t\tconst txDataWithDefaults = await self._applyDefaultsToTxDataAsync({\n\t\t\t\t\t...txData,\n\t\t\t\t\tdata: this.getABIEncodedTransactionData(),\n\t\t\t\t});\n\t\t\t\treturn self._web3Wrapper.estimateGasAsync(txDataWithDefaults);\n\t\t\t},\n\t\t\tasync callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<void> {\n\t\t\t\tBaseContract._assertCallParams(callData, defaultBlock);\n\t\t\t\tconst rawCallResult = await self._performCallAsync(\n\t\t\t\t\t{ ...callData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tdefaultBlock\n\t\t\t\t);\n\t\t\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\t\t\treturn abiEncoder.strictDecodeReturnValue<void>(rawCallResult);\n\t\t\t},\n\t\t\tgetABIEncodedTransactionData(): string {\n\t\t\t\treturn self._strictEncodeArguments(functionSignature, [_account.toLowerCase(), _value]);\n\t\t\t},\n\t\t};\n\t}\n\tpublic transferOnLiquidation(_from: string, _to: string, _value: BigNumber): ContractTxFunctionObj<void> {\n\t\tconst self = (this as any) as AtokenContract;\n\t\tassert.isString(\"_from\", _from);\n\t\tassert.isString(\"_to\", _to);\n\t\tassert.isBigNumber(\"_value\", _value);\n\t\tconst functionSignature = \"transferOnLiquidation(address,address,uint256)\";\n\n\t\treturn {\n\t\t\tasync sendTransactionAsync(\n\t\t\t\ttxData?: Partial<TxData> | undefined,\n\t\t\t\topts: SendTransactionOpts = { shouldValidate: true }\n\t\t\t): Promise<string> {\n\t\t\t\tconst txDataWithDefaults = await self._applyDefaultsToTxDataAsync(\n\t\t\t\t\t{ ...txData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tthis.estimateGasAsync.bind(this)\n\t\t\t\t);\n\t\t\t\tif (opts.shouldValidate !== false) {\n\t\t\t\t\tawait this.callAsync(txDataWithDefaults);\n\t\t\t\t}\n\t\t\t\treturn self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);\n\t\t\t},\n\t\t\tawaitTransactionSuccessAsync(\n\t\t\t\ttxData?: Partial<TxData>,\n\t\t\t\topts: AwaitTransactionSuccessOpts = { shouldValidate: true }\n\t\t\t): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {\n\t\t\t\treturn self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);\n\t\t\t},\n\t\t\tasync estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {\n\t\t\t\tconst txDataWithDefaults = await self._applyDefaultsToTxDataAsync({\n\t\t\t\t\t...txData,\n\t\t\t\t\tdata: this.getABIEncodedTransactionData(),\n\t\t\t\t});\n\t\t\t\treturn self._web3Wrapper.estimateGasAsync(txDataWithDefaults);\n\t\t\t},\n\t\t\tasync callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<void> {\n\t\t\t\tBaseContract._assertCallParams(callData, defaultBlock);\n\t\t\t\tconst rawCallResult = await self._performCallAsync(\n\t\t\t\t\t{ ...callData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tdefaultBlock\n\t\t\t\t);\n\t\t\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\t\t\treturn abiEncoder.strictDecodeReturnValue<void>(rawCallResult);\n\t\t\t},\n\t\t\tgetABIEncodedTransactionData(): string {\n\t\t\t\treturn self._strictEncodeArguments(functionSignature, [_from.toLowerCase(), _to.toLowerCase(), _value]);\n\t\t\t},\n\t\t};\n\t}\n\tpublic balanceOf(_user: string): ContractFunctionObj<BigNumber> {\n\t\tconst self = (this as any) as AtokenContract;\n\t\tassert.isString(\"_user\", _user);\n\t\tconst functionSignature = \"balanceOf(address)\";\n\n\t\treturn {\n\t\t\tasync callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber> {\n\t\t\t\tBaseContract._assertCallParams(callData, defaultBlock);\n\t\t\t\tconst rawCallResult = await self._performCallAsync(\n\t\t\t\t\t{ ...callData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tdefaultBlock\n\t\t\t\t);\n\t\t\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\t\t\treturn abiEncoder.strictDecodeReturnValue<BigNumber>(rawCallResult);\n\t\t\t},\n\t\t\tgetABIEncodedTransactionData(): string {\n\t\t\t\treturn self._strictEncodeArguments(functionSignature, [_user.toLowerCase()]);\n\t\t\t},\n\t\t};\n\t}\n\tpublic principalBalanceOf(_user: string): ContractFunctionObj<BigNumber> {\n\t\tconst self = (this as any) as AtokenContract;\n\t\tassert.isString(\"_user\", _user);\n\t\tconst functionSignature = \"principalBalanceOf(address)\";\n\n\t\treturn {\n\t\t\tasync callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber> {\n\t\t\t\tBaseContract._assertCallParams(callData, defaultBlock);\n\t\t\t\tconst rawCallResult = await self._performCallAsync(\n\t\t\t\t\t{ ...callData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tdefaultBlock\n\t\t\t\t);\n\t\t\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\t\t\treturn abiEncoder.strictDecodeReturnValue<BigNumber>(rawCallResult);\n\t\t\t},\n\t\t\tgetABIEncodedTransactionData(): string {\n\t\t\t\treturn self._strictEncodeArguments(functionSignature, [_user.toLowerCase()]);\n\t\t\t},\n\t\t};\n\t}\n\tpublic totalSupply(): ContractFunctionObj<BigNumber> {\n\t\tconst self = (this as any) as AtokenContract;\n\t\tconst functionSignature = \"totalSupply()\";\n\n\t\treturn {\n\t\t\tasync callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber> {\n\t\t\t\tBaseContract._assertCallParams(callData, defaultBlock);\n\t\t\t\tconst rawCallResult = await self._performCallAsync(\n\t\t\t\t\t{ ...callData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tdefaultBlock\n\t\t\t\t);\n\t\t\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\t\t\treturn abiEncoder.strictDecodeReturnValue<BigNumber>(rawCallResult);\n\t\t\t},\n\t\t\tgetABIEncodedTransactionData(): string {\n\t\t\t\treturn self._strictEncodeArguments(functionSignature, []);\n\t\t\t},\n\t\t};\n\t}\n\tpublic isTransferAllowed(_user: string, _amount: BigNumber): ContractFunctionObj<boolean> {\n\t\tconst self = (this as any) as AtokenContract;\n\t\tassert.isString(\"_user\", _user);\n\t\tassert.isBigNumber(\"_amount\", _amount);\n\t\tconst functionSignature = \"isTransferAllowed(address,uint256)\";\n\n\t\treturn {\n\t\t\tasync callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<boolean> {\n\t\t\t\tBaseContract._assertCallParams(callData, defaultBlock);\n\t\t\t\tconst rawCallResult = await self._performCallAsync(\n\t\t\t\t\t{ ...callData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tdefaultBlock\n\t\t\t\t);\n\t\t\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\t\t\treturn abiEncoder.strictDecodeReturnValue<boolean>(rawCallResult);\n\t\t\t},\n\t\t\tgetABIEncodedTransactionData(): string {\n\t\t\t\treturn self._strictEncodeArguments(functionSignature, [_user.toLowerCase(), _amount]);\n\t\t\t},\n\t\t};\n\t}\n\tpublic getUserIndex(_user: string): ContractFunctionObj<BigNumber> {\n\t\tconst self = (this as any) as AtokenContract;\n\t\tassert.isString(\"_user\", _user);\n\t\tconst functionSignature = \"getUserIndex(address)\";\n\n\t\treturn {\n\t\t\tasync callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber> {\n\t\t\t\tBaseContract._assertCallParams(callData, defaultBlock);\n\t\t\t\tconst rawCallResult = await self._performCallAsync(\n\t\t\t\t\t{ ...callData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tdefaultBlock\n\t\t\t\t);\n\t\t\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\t\t\treturn abiEncoder.strictDecodeReturnValue<BigNumber>(rawCallResult);\n\t\t\t},\n\t\t\tgetABIEncodedTransactionData(): string {\n\t\t\t\treturn self._strictEncodeArguments(functionSignature, [_user.toLowerCase()]);\n\t\t\t},\n\t\t};\n\t}\n\tpublic getInterestRedirectionAddress(_user: string): ContractFunctionObj<string> {\n\t\tconst self = (this as any) as AtokenContract;\n\t\tassert.isString(\"_user\", _user);\n\t\tconst functionSignature = \"getInterestRedirectionAddress(address)\";\n\n\t\treturn {\n\t\t\tasync callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<string> {\n\t\t\t\tBaseContract._assertCallParams(callData, defaultBlock);\n\t\t\t\tconst rawCallResult = await self._performCallAsync(\n\t\t\t\t\t{ ...callData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tdefaultBlock\n\t\t\t\t);\n\t\t\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\t\t\treturn abiEncoder.strictDecodeReturnValue<string>(rawCallResult);\n\t\t\t},\n\t\t\tgetABIEncodedTransactionData(): string {\n\t\t\t\treturn self._strictEncodeArguments(functionSignature, [_user.toLowerCase()]);\n\t\t\t},\n\t\t};\n\t}\n\tpublic getRedirectedBalance(_user: string): ContractFunctionObj<BigNumber> {\n\t\tconst self = (this as any) as AtokenContract;\n\t\tassert.isString(\"_user\", _user);\n\t\tconst functionSignature = \"getRedirectedBalance(address)\";\n\n\t\treturn {\n\t\t\tasync callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber> {\n\t\t\t\tBaseContract._assertCallParams(callData, defaultBlock);\n\t\t\t\tconst rawCallResult = await self._performCallAsync(\n\t\t\t\t\t{ ...callData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tdefaultBlock\n\t\t\t\t);\n\t\t\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\t\t\treturn abiEncoder.strictDecodeReturnValue<BigNumber>(rawCallResult);\n\t\t\t},\n\t\t\tgetABIEncodedTransactionData(): string {\n\t\t\t\treturn self._strictEncodeArguments(functionSignature, [_user.toLowerCase()]);\n\t\t\t},\n\t\t};\n\t}\n\n\t/**\n\t * Subscribe to an event type emitted by the Atoken contract.\n\t * @param eventName The Atoken contract event you would like to subscribe to.\n\t * @param indexFilterValues An object where the keys are indexed args returned by the event and\n\t * the value is the value you are interested in. E.g `{maker: aUserAddressHex}`\n\t * @param callback Callback that gets called when a log is added/removed\n\t * @param isVerbose Enable verbose subscription warnings (e.g recoverable network issues encountered)\n\t * @return Subscription token used later to unsubscribe\n\t */\n\tpublic subscribe<ArgsType extends AtokenEventArgs>(\n\t\teventName: AtokenEvents,\n\t\tindexFilterValues: IndexedFilterValues,\n\t\tcallback: EventCallback<ArgsType>,\n\t\tisVerbose: boolean = false,\n\t\tblockPollingIntervalMs?: number\n\t): string {\n\t\tassert.doesBelongToStringEnum(\"eventName\", eventName, AtokenEvents);\n\t\tassert.doesConformToSchema(\"indexFilterValues\", indexFilterValues, schemas.indexFilterValuesSchema);\n\t\tassert.isFunction(\"callback\", callback);\n\t\tconst subscriptionToken = this._subscriptionManager.subscribe<ArgsType>(\n\t\t\tthis.address,\n\t\t\teventName,\n\t\t\tindexFilterValues,\n\t\t\tAtokenContract.ABI(),\n\t\t\tcallback,\n\t\t\tisVerbose,\n\t\t\tblockPollingIntervalMs\n\t\t);\n\t\treturn subscriptionToken;\n\t}\n\t/**\n\t * Cancel a subscription\n\t * @param subscriptionToken Subscription token returned by `subscribe()`\n\t */\n\tpublic unsubscribe(subscriptionToken: string): void {\n\t\tthis._subscriptionManager.unsubscribe(subscriptionToken);\n\t}\n\t/**\n\t * Cancels all existing subscriptions\n\t */\n\tpublic unsubscribeAll(): void {\n\t\tthis._subscriptionManager.unsubscribeAll();\n\t}\n\t/**\n\t * Gets historical logs without creating a subscription\n\t * @param eventName The Atoken contract event you would like to subscribe to.\n\t * @param blockRange Block range to get logs from.\n\t * @param indexFilterValues An object where the keys are indexed args returned by the event and\n\t * the value is the value you are interested in. E.g `{_from: aUserAddressHex}`\n\t * @return Array of logs that match the parameters\n\t */\n\tpublic async getLogsAsync<ArgsType extends AtokenEventArgs>(\n\t\teventName: AtokenEvents,\n\t\tblockRange: BlockRange,\n\t\tindexFilterValues: IndexedFilterValues\n\t): Promise<Array<LogWithDecodedArgs<ArgsType>>> {\n\t\tassert.doesBelongToStringEnum(\"eventName\", eventName, AtokenEvents);\n\t\tassert.doesConformToSchema(\"blockRange\", blockRange, schemas.blockRangeSchema);\n\t\tassert.doesConformToSchema(\"indexFilterValues\", indexFilterValues, schemas.indexFilterValuesSchema);\n\t\tconst logs = await this._subscriptionManager.getLogsAsync<ArgsType>(\n\t\t\tthis.address,\n\t\t\teventName,\n\t\t\tblockRange,\n\t\t\tindexFilterValues,\n\t\t\tAtokenContract.ABI()\n\t\t);\n\t\treturn logs;\n\t}\n\tconstructor(\n\t\taddress: string,\n\t\tsupportedProvider: SupportedProvider,\n\t\ttxDefaults?: Partial<TxData>,\n\t\tlogDecodeDependencies?: { [contractName: string]: ContractAbi },\n\t\tdeployedBytecode: string | undefined = AtokenContract.deployedBytecode\n\t) {\n\t\tsuper(\n\t\t\t\"Atoken\",\n\t\t\tAtokenContract.ABI(),\n\t\t\taddress,\n\t\t\tsupportedProvider,\n\t\t\ttxDefaults,\n\t\t\tlogDecodeDependencies,\n\t\t\tdeployedBytecode\n\t\t);\n\t\tclassUtils.bindAll(this, [\"_abiEncoderByFunctionSignature\", \"address\", \"_web3Wrapper\"]);\n\t\tthis._subscriptionManager = new SubscriptionManager<AtokenEventArgs, AtokenEvents>(\n\t\t\tAtokenContract.ABI(),\n\t\t\tthis._web3Wrapper\n\t\t);\n\t\tAtokenContract.ABI().forEach((item, index) => {\n\t\t\tif (item.type === \"function\") {\n\t\t\t\tconst methodAbi = item as MethodAbi;\n\t\t\t\tthis._methodABIIndex[methodAbi.name] = index;\n\t\t\t}\n\t\t});\n\t}\n}\n\n// tslint:disable:max-file-line-count\n// tslint:enable:no-unbound-method no-parameter-reassignment no-consecutive-blank-lines ordered-imports align\n// tslint:enable:trailing-comma whitespace no-trailing-whitespace\n"],"sourceRoot":""}