{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toArray.js","utils/bzx/tokenizedRegistry.js"],"names":["_toArray","arr","TokenizedRegistryEvents","OwnershipTransferred","TokenizedRegistryContract","address","supportedProvider","txDefaults","logDecodeDependencies","deployedBytecode","ABI","contractName","_methodABIIndex","classUtils","bindAll","_subscriptionManager","SubscriptionManager","_web3Wrapper","forEach","item","index","type","methodAbi","name","artifact","assert","doesConformToSchema","schemas","txDataSchema","addressSchema","numberSchema","jsNumber","undefined","compilerOutput","Error","provider","providerUtils","standardizeOrThrow","bytecode","evm","object","abi","logDecodeDependenciesAbiOnly","Object","keys","key","deployAsync","isHexString","constructorAbi","BaseContract","_lookupConstructorAbi","_formatABIDataItemList","inputs","_bigNumberToString","iface","ethers","Interface","deployInfo","deployFunction","txData","encode","web3Wrapper","Web3Wrapper","_applyDefaultsToContractTxDataAsync","data","estimateGasAsync","bind","txDataWithDefaults","sendTransactionAsync","txHash","logUtils","log","awaitTransactionSuccessAsync","txReceipt","contractAddress","contractInstance","constructorArgs","constant","outputs","payable","stateMutability","anonymous","indexed","components","methodName","this","methodAbiToFunctionSignature","callData","functionSignature","getFunctionSignature","_lookupAbiEncoder","strictDecode","strictDecodeReturnValue","getSelector","self","callAsync","defaultBlock","_assertCallParams","_performCallAsync","getABIEncodedTransactionData","rawCallResult","abiEncoder","string","_strictEncodeArguments","index_0","isString","toLowerCase","isBigNumber","_newOwner","opts","shouldValidate","_applyDefaultsToTxDataAsync","_promiseWithTransactionHash","_tokens","_assets","_names","_symbols","_types","isArray","_token","_asset","_name","_symbol","_type","_start","_count","_tokenType","eventName","indexFilterValues","callback","isVerbose","blockPollingIntervalMs","doesBelongToStringEnum","indexFilterValuesSchema","isFunction","subscriptionToken","subscribe","unsubscribe","unsubscribeAll","blockRange","blockRangeSchema","getLogsAsync","logs"],"mappings":"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","file":"static/js/47.7d46f46b.chunk.js","sourcesContent":["import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _toArray(arr) {\n  return arrayWithHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableRest();\n}","// tslint:disable:no-consecutive-blank-lines ordered-imports align trailing-comma enum-naming\n// tslint:disable:whitespace no-unbound-method no-trailing-whitespace\n// tslint:disable:no-unused-variable\nimport { BaseContract, SubscriptionManager, methodAbiToFunctionSignature } from \"@0x/base-contract\";\nimport { schemas } from \"@0x/json-schemas\";\nimport { classUtils, logUtils, providerUtils } from \"@0x/utils\";\nimport { Web3Wrapper } from \"@0x/web3-wrapper\";\nimport { assert } from \"@0x/assert\";\nimport * as ethers from \"ethers\";\n\nconst TokenizedRegistryEvents = {\n\tOwnershipTransferred: \"OwnershipTransferred\",\n};\n/* istanbul ignore next */\n// tslint:disable:no-parameter-reassignment\n// tslint:disable-next-line:class-name\nexport class TokenizedRegistryContract extends BaseContract {\n\t/**\n\t * @ignore\n\t */\n\tdeployedBytecode;\n\tcontractName = \"TokenizedRegistry\";\n\t_methodABIIndex = {};\n\t_subscriptionManager;\n\n\tasync deployFrom0xArtifactAsync(artifact, supportedProvider, txDefaults, logDecodeDependencies) {\n\t\tassert.doesConformToSchema(\"txDefaults\", txDefaults, schemas.txDataSchema, [\n\t\t\tschemas.addressSchema,\n\t\t\tschemas.numberSchema,\n\t\t\tschemas.jsNumber,\n\t\t]);\n\t\tif (artifact.compilerOutput === undefined) {\n\t\t\tthrow new Error(\"Compiler output not found in the artifact file\");\n\t\t}\n\t\tconst provider = providerUtils.standardizeOrThrow(supportedProvider);\n\t\tconst bytecode = artifact.compilerOutput.evm.bytecode.object;\n\t\tconst abi = artifact.compilerOutput.abi;\n\t\tconst logDecodeDependenciesAbiOnly = {};\n\t\tif (Object.keys(logDecodeDependencies) !== undefined) {\n\t\t\tfor (const key of Object.keys(logDecodeDependencies)) {\n\t\t\t\tlogDecodeDependenciesAbiOnly[key] = logDecodeDependencies[key].compilerOutput.abi;\n\t\t\t}\n\t\t}\n\t\treturn TokenizedRegistryContract.deployAsync(bytecode, abi, provider, txDefaults, logDecodeDependenciesAbiOnly);\n\t}\n\n\tasync deployAsync(bytecode, abi, supportedProvider, txDefaults, logDecodeDependencies) {\n\t\tassert.isHexString(\"bytecode\", bytecode);\n\t\tassert.doesConformToSchema(\"txDefaults\", txDefaults, schemas.txDataSchema, [\n\t\t\tschemas.addressSchema,\n\t\t\tschemas.numberSchema,\n\t\t\tschemas.jsNumber,\n\t\t]);\n\t\tconst provider = providerUtils.standardizeOrThrow(supportedProvider);\n\t\tconst constructorAbi = BaseContract._lookupConstructorAbi(abi);\n\t\t[] = BaseContract._formatABIDataItemList(constructorAbi.inputs, [], BaseContract._bigNumberToString);\n\t\t//@ts-ignore\n\t\tconst iface = new ethers.utils.Interface(abi);\n\t\tconst deployInfo = iface.deployFunction;\n\t\tconst txData = deployInfo.encode(bytecode, []);\n\t\tconst web3Wrapper = new Web3Wrapper(provider);\n\t\tconst txDataWithDefaults = await BaseContract._applyDefaultsToContractTxDataAsync(\n\t\t\t{\n\t\t\t\tdata: txData,\n\t\t\t\t...txDefaults,\n\t\t\t},\n\t\t\tweb3Wrapper.estimateGasAsync.bind(web3Wrapper)\n\t\t);\n\t\tconst txHash = await web3Wrapper.sendTransactionAsync(txDataWithDefaults);\n\t\tlogUtils.log(`transactionHash: ${txHash}`);\n\t\tconst txReceipt = await web3Wrapper.awaitTransactionSuccessAsync(txHash);\n\t\tlogUtils.log(`TokenizedRegistry successfully deployed at ${txReceipt.contractAddress}`);\n\t\tconst contractInstance = new TokenizedRegistryContract(\n\t\t\ttxReceipt.contractAddress,\n\t\t\tprovider,\n\t\t\ttxDefaults,\n\t\t\tlogDecodeDependencies\n\t\t);\n\t\tcontractInstance.constructorArgs = [];\n\t\treturn contractInstance;\n\t}\n\n\t/**\n\t * @returns      The contract ABI\n\t */\n\tABI() {\n\t\tconst abi = [\n\t\t\t{\n\t\t\t\tconstant: true,\n\t\t\t\tinputs: [],\n\t\t\t\tname: \"owner\",\n\t\t\t\toutputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tpayable: false,\n\t\t\t\tstateMutability: \"view\",\n\t\t\t\ttype: \"function\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tconstant: true,\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"index_0\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: \"tokens\",\n\t\t\t\toutputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"token\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"asset\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"name\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"symbol\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"tokenType\",\n\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"index\",\n\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tpayable: false,\n\t\t\t\tstateMutability: \"view\",\n\t\t\t\ttype: \"function\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tconstant: true,\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"index_0\",\n\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: \"tokenAddresses\",\n\t\t\t\toutputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tpayable: false,\n\t\t\t\tstateMutability: \"view\",\n\t\t\t\ttype: \"function\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tconstant: false,\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_newOwner\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: \"transferOwnership\",\n\t\t\t\toutputs: [],\n\t\t\t\tpayable: false,\n\t\t\t\tstateMutability: \"nonpayable\",\n\t\t\t\ttype: \"function\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tanonymous: false,\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"previousOwner\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t\tindexed: true,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"newOwner\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t\tindexed: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: \"OwnershipTransferred\",\n\t\t\t\toutputs: [],\n\t\t\t\ttype: \"event\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tconstant: false,\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_tokens\",\n\t\t\t\t\t\ttype: \"address[]\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_assets\",\n\t\t\t\t\t\ttype: \"address[]\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_names\",\n\t\t\t\t\t\ttype: \"string[]\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_symbols\",\n\t\t\t\t\t\ttype: \"string[]\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_types\",\n\t\t\t\t\t\ttype: \"uint256[]\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: \"addTokens\",\n\t\t\t\toutputs: [],\n\t\t\t\tpayable: false,\n\t\t\t\tstateMutability: \"nonpayable\",\n\t\t\t\ttype: \"function\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tconstant: false,\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_tokens\",\n\t\t\t\t\t\ttype: \"address[]\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: \"removeTokens\",\n\t\t\t\toutputs: [],\n\t\t\t\tpayable: false,\n\t\t\t\tstateMutability: \"nonpayable\",\n\t\t\t\ttype: \"function\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tconstant: false,\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_token\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_asset\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_name\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_symbol\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_type\",\n\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: \"addToken\",\n\t\t\t\toutputs: [],\n\t\t\t\tpayable: false,\n\t\t\t\tstateMutability: \"nonpayable\",\n\t\t\t\ttype: \"function\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tconstant: false,\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_token\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: \"removeToken\",\n\t\t\t\toutputs: [],\n\t\t\t\tpayable: false,\n\t\t\t\tstateMutability: \"nonpayable\",\n\t\t\t\ttype: \"function\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tconstant: false,\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_token\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_name\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: \"setTokenName\",\n\t\t\t\toutputs: [],\n\t\t\t\tpayable: false,\n\t\t\t\tstateMutability: \"nonpayable\",\n\t\t\t\ttype: \"function\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tconstant: false,\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_token\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_symbol\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: \"setTokenSymbol\",\n\t\t\t\toutputs: [],\n\t\t\t\tpayable: false,\n\t\t\t\tstateMutability: \"nonpayable\",\n\t\t\t\ttype: \"function\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tconstant: true,\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_symbol\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: \"getTokenAddressBySymbol\",\n\t\t\t\toutputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tpayable: false,\n\t\t\t\tstateMutability: \"view\",\n\t\t\t\ttype: \"function\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tconstant: true,\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_name\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: \"getTokenAddressByName\",\n\t\t\t\toutputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tpayable: false,\n\t\t\t\tstateMutability: \"view\",\n\t\t\t\ttype: \"function\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tconstant: true,\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_token\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: \"getTokenByAddress\",\n\t\t\t\toutputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"\",\n\t\t\t\t\t\ttype: \"tuple\",\n\t\t\t\t\t\tcomponents: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: \"token\",\n\t\t\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: \"asset\",\n\t\t\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: \"name\",\n\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: \"symbol\",\n\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: \"tokenType\",\n\t\t\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: \"index\",\n\t\t\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tpayable: false,\n\t\t\t\tstateMutability: \"view\",\n\t\t\t\ttype: \"function\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tconstant: true,\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_name\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: \"getTokenByName\",\n\t\t\t\toutputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"\",\n\t\t\t\t\t\ttype: \"tuple\",\n\t\t\t\t\t\tcomponents: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: \"token\",\n\t\t\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: \"asset\",\n\t\t\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: \"name\",\n\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: \"symbol\",\n\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: \"tokenType\",\n\t\t\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: \"index\",\n\t\t\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tpayable: false,\n\t\t\t\tstateMutability: \"view\",\n\t\t\t\ttype: \"function\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tconstant: true,\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_symbol\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: \"getTokenBySymbol\",\n\t\t\t\toutputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"\",\n\t\t\t\t\t\ttype: \"tuple\",\n\t\t\t\t\t\tcomponents: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: \"token\",\n\t\t\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: \"asset\",\n\t\t\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: \"name\",\n\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: \"symbol\",\n\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: \"tokenType\",\n\t\t\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: \"index\",\n\t\t\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tpayable: false,\n\t\t\t\tstateMutability: \"view\",\n\t\t\t\ttype: \"function\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tconstant: true,\n\t\t\t\tinputs: [],\n\t\t\t\tname: \"getTokenAddresses\",\n\t\t\t\toutputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"\",\n\t\t\t\t\t\ttype: \"address[]\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tpayable: false,\n\t\t\t\tstateMutability: \"view\",\n\t\t\t\ttype: \"function\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tconstant: true,\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_start\",\n\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_count\",\n\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_tokenType\",\n\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: \"getTokens\",\n\t\t\t\toutputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"tokenData\",\n\t\t\t\t\t\ttype: \"tuple[]\",\n\t\t\t\t\t\tcomponents: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: \"token\",\n\t\t\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: \"asset\",\n\t\t\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: \"name\",\n\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: \"symbol\",\n\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: \"tokenType\",\n\t\t\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: \"index\",\n\t\t\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tpayable: false,\n\t\t\t\tstateMutability: \"view\",\n\t\t\t\ttype: \"function\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tconstant: true,\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_token\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_tokenType\",\n\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: \"isTokenType\",\n\t\t\t\toutputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"valid\",\n\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tpayable: false,\n\t\t\t\tstateMutability: \"view\",\n\t\t\t\ttype: \"function\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tconstant: true,\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_token\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_tokenType\",\n\t\t\t\t\t\ttype: \"uint256\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: \"getTokenAsset\",\n\t\t\t\toutputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"\",\n\t\t\t\t\t\ttype: \"address\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tpayable: false,\n\t\t\t\tstateMutability: \"view\",\n\t\t\t\ttype: \"function\",\n\t\t\t},\n\t\t];\n\t\treturn abi;\n\t}\n\n\tgetFunctionSignature(methodName) {\n\t\tconst index = this._methodABIIndex[methodName];\n\t\tconst methodAbi = TokenizedRegistryContract.ABI()[index]; // tslint:disable-line:no-unnecessary-type-assertion\n\t\tconst functionSignature = methodAbiToFunctionSignature(methodAbi);\n\t\treturn functionSignature;\n\t}\n\n\tgetABIDecodedTransactionData(methodName, callData) {\n\t\tconst functionSignature = this.getFunctionSignature(methodName);\n\t\tconst self = this;\n\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\tconst abiDecodedCallData = abiEncoder.strictDecode(callData);\n\t\treturn abiDecodedCallData;\n\t}\n\n\tgetABIDecodedReturnData(methodName, callData) {\n\t\tconst functionSignature = this.getFunctionSignature(methodName);\n\t\tconst self = this;\n\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\tconst abiDecodedCallData = abiEncoder.strictDecodeReturnValue(callData);\n\t\treturn abiDecodedCallData;\n\t}\n\n\tgetSelector(methodName) {\n\t\tconst functionSignature = this.getFunctionSignature(methodName);\n\t\tconst self = this;\n\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\treturn abiEncoder.getSelector();\n\t}\n\n\towner() {\n\t\tconst self = this;\n\t\tconst functionSignature = \"owner()\";\n\n\t\treturn {\n\t\t\tasync callAsync(callData = {}, defaultBlock) {\n\t\t\t\tBaseContract._assertCallParams(callData, defaultBlock);\n\t\t\t\tconst rawCallResult = await self._performCallAsync(\n\t\t\t\t\t{ ...callData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tdefaultBlock\n\t\t\t\t);\n\t\t\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\t\t\treturn abiEncoder.strictDecodeReturnValue < string > (rawCallResult);\n\t\t\t},\n\t\t\tgetABIEncodedTransactionData() {\n\t\t\t\treturn self._strictEncodeArguments(functionSignature, []);\n\t\t\t},\n\t\t};\n\t}\n\n\ttokens(index_0) {\n\t\tconst self = this;\n\t\tassert.isString(\"index_0\", index_0);\n\t\tconst functionSignature = \"tokens(address)\";\n\n\t\treturn {\n\t\t\tasync callAsync(callData = {}, defaultBlock) {\n\t\t\t\tBaseContract._assertCallParams(callData, defaultBlock);\n\t\t\t\tconst rawCallResult = await self._performCallAsync(\n\t\t\t\t\t{ ...callData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tdefaultBlock\n\t\t\t\t);\n\t\t\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\t\t\treturn abiEncoder.strictDecodeReturnValue(rawCallResult);\n\t\t\t},\n\t\t\tgetABIEncodedTransactionData() {\n\t\t\t\treturn self._strictEncodeArguments(functionSignature, [index_0.toLowerCase()]);\n\t\t\t},\n\t\t};\n\t}\n\n\ttokenAddresses(index_0) {\n\t\tconst self = this;\n\t\tassert.isBigNumber(\"index_0\", index_0);\n\t\tconst functionSignature = \"tokenAddresses(uint256)\";\n\n\t\treturn {\n\t\t\tasync callAsync(callData = {}, defaultBlock) {\n\t\t\t\tBaseContract._assertCallParams(callData, defaultBlock);\n\t\t\t\tconst rawCallResult = await self._performCallAsync(\n\t\t\t\t\t{ ...callData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tdefaultBlock\n\t\t\t\t);\n\t\t\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\t\t\treturn abiEncoder.strictDecodeReturnValue < string > (rawCallResult);\n\t\t\t},\n\t\t\tgetABIEncodedTransactionData() {\n\t\t\t\treturn self._strictEncodeArguments(functionSignature, [index_0]);\n\t\t\t},\n\t\t};\n\t}\n\n\ttransferOwnership(_newOwner) {\n\t\tconst self = this;\n\t\tassert.isString(\"_newOwner\", _newOwner);\n\t\tconst functionSignature = \"transferOwnership(address)\";\n\n\t\treturn {\n\t\t\tasync sendTransactionAsync(txData, opts = { shouldValidate: true }) {\n\t\t\t\tconst txDataWithDefaults = await self._applyDefaultsToTxDataAsync(\n\t\t\t\t\t{ ...txData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tthis.estimateGasAsync.bind(this)\n\t\t\t\t);\n\t\t\t\tif (opts.shouldValidate !== false) {\n\t\t\t\t\tawait this.callAsync(txDataWithDefaults);\n\t\t\t\t}\n\t\t\t\treturn self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);\n\t\t\t},\n\t\t\tawaitTransactionSuccessAsync(txData, opts = { shouldValidate: true }) {\n\t\t\t\treturn self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);\n\t\t\t},\n\t\t\tasync estimateGasAsync(txData) {\n\t\t\t\tconst txDataWithDefaults = await self._applyDefaultsToTxDataAsync({\n\t\t\t\t\t...txData,\n\t\t\t\t\tdata: this.getABIEncodedTransactionData(),\n\t\t\t\t});\n\t\t\t\treturn self._web3Wrapper.estimateGasAsync(txDataWithDefaults);\n\t\t\t},\n\t\t\tasync callAsync(callData = {}, defaultBlock) {\n\t\t\t\tBaseContract._assertCallParams(callData, defaultBlock);\n\t\t\t\tconst rawCallResult = await self._performCallAsync(\n\t\t\t\t\t{ ...callData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tdefaultBlock\n\t\t\t\t);\n\t\t\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\t\t\treturn abiEncoder.strictDecodeReturnValue(rawCallResult);\n\t\t\t},\n\t\t\tgetABIEncodedTransactionData() {\n\t\t\t\treturn self._strictEncodeArguments(functionSignature, [_newOwner.toLowerCase()]);\n\t\t\t},\n\t\t};\n\t}\n\n\taddTokens(_tokens, _assets, _names, _symbols, _types) {\n\t\tconst self = this;\n\t\tassert.isArray(\"_tokens\", _tokens);\n\t\tassert.isArray(\"_assets\", _assets);\n\t\tassert.isArray(\"_names\", _names);\n\t\tassert.isArray(\"_symbols\", _symbols);\n\t\tassert.isArray(\"_types\", _types);\n\t\tconst functionSignature = \"addTokens(address[],address[],string[],string[],uint256[])\";\n\n\t\treturn {\n\t\t\tasync sendTransactionAsync(txData, opts = { shouldValidate: true }) {\n\t\t\t\tconst txDataWithDefaults = await self._applyDefaultsToTxDataAsync(\n\t\t\t\t\t{ ...txData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tthis.estimateGasAsync.bind(this)\n\t\t\t\t);\n\t\t\t\tif (opts.shouldValidate !== false) {\n\t\t\t\t\tawait this.callAsync(txDataWithDefaults);\n\t\t\t\t}\n\t\t\t\treturn self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);\n\t\t\t},\n\t\t\tawaitTransactionSuccessAsync(txData, opts = { shouldValidate: true }) {\n\t\t\t\treturn self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);\n\t\t\t},\n\t\t\tasync estimateGasAsync(txData) {\n\t\t\t\tconst txDataWithDefaults = await self._applyDefaultsToTxDataAsync({\n\t\t\t\t\t...txData,\n\t\t\t\t\tdata: this.getABIEncodedTransactionData(),\n\t\t\t\t});\n\t\t\t\treturn self._web3Wrapper.estimateGasAsync(txDataWithDefaults);\n\t\t\t},\n\t\t\tasync callAsync(callData = {}, defaultBlock) {\n\t\t\t\tBaseContract._assertCallParams(callData, defaultBlock);\n\t\t\t\tconst rawCallResult = await self._performCallAsync(\n\t\t\t\t\t{ ...callData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tdefaultBlock\n\t\t\t\t);\n\t\t\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\t\t\treturn abiEncoder.strictDecodeReturnValue(rawCallResult);\n\t\t\t},\n\t\t\tgetABIEncodedTransactionData() {\n\t\t\t\treturn self._strictEncodeArguments(functionSignature, [_tokens, _assets, _names, _symbols, _types]);\n\t\t\t},\n\t\t};\n\t}\n\n\tremoveTokens(_tokens) {\n\t\tconst self = this;\n\t\tassert.isArray(\"_tokens\", _tokens);\n\t\tconst functionSignature = \"removeTokens(address[])\";\n\n\t\treturn {\n\t\t\tasync sendTransactionAsync(txData, opts = { shouldValidate: true }) {\n\t\t\t\tconst txDataWithDefaults = await self._applyDefaultsToTxDataAsync(\n\t\t\t\t\t{ ...txData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tthis.estimateGasAsync.bind(this)\n\t\t\t\t);\n\t\t\t\tif (opts.shouldValidate !== false) {\n\t\t\t\t\tawait this.callAsync(txDataWithDefaults);\n\t\t\t\t}\n\t\t\t\treturn self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);\n\t\t\t},\n\t\t\tawaitTransactionSuccessAsync(txData, opts = { shouldValidate: true }) {\n\t\t\t\treturn self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);\n\t\t\t},\n\t\t\tasync estimateGasAsync(txData) {\n\t\t\t\tconst txDataWithDefaults = await self._applyDefaultsToTxDataAsync({\n\t\t\t\t\t...txData,\n\t\t\t\t\tdata: this.getABIEncodedTransactionData(),\n\t\t\t\t});\n\t\t\t\treturn self._web3Wrapper.estimateGasAsync(txDataWithDefaults);\n\t\t\t},\n\t\t\tasync callAsync(callData = {}, defaultBlock) {\n\t\t\t\tBaseContract._assertCallParams(callData, defaultBlock);\n\t\t\t\tconst rawCallResult = await self._performCallAsync(\n\t\t\t\t\t{ ...callData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tdefaultBlock\n\t\t\t\t);\n\t\t\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\t\t\treturn abiEncoder.strictDecodeReturnValue(rawCallResult);\n\t\t\t},\n\t\t\tgetABIEncodedTransactionData() {\n\t\t\t\treturn self._strictEncodeArguments(functionSignature, [_tokens]);\n\t\t\t},\n\t\t};\n\t}\n\n\taddToken(_token, _asset, _name, _symbol, _type) {\n\t\tconst self = this;\n\t\tassert.isString(\"_token\", _token);\n\t\tassert.isString(\"_asset\", _asset);\n\t\tassert.isString(\"_name\", _name);\n\t\tassert.isString(\"_symbol\", _symbol);\n\t\tassert.isBigNumber(\"_type\", _type);\n\t\tconst functionSignature = \"addToken(address,address,string,string,uint256)\";\n\n\t\treturn {\n\t\t\tasync sendTransactionAsync(txData, opts = { shouldValidate: true }) {\n\t\t\t\tconst txDataWithDefaults = await self._applyDefaultsToTxDataAsync(\n\t\t\t\t\t{ ...txData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tthis.estimateGasAsync.bind(this)\n\t\t\t\t);\n\t\t\t\tif (opts.shouldValidate !== false) {\n\t\t\t\t\tawait this.callAsync(txDataWithDefaults);\n\t\t\t\t}\n\t\t\t\treturn self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);\n\t\t\t},\n\t\t\tawaitTransactionSuccessAsync(txData, opts = { shouldValidate: true }) {\n\t\t\t\treturn self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);\n\t\t\t},\n\t\t\tasync estimateGasAsync(txData) {\n\t\t\t\tconst txDataWithDefaults = await self._applyDefaultsToTxDataAsync({\n\t\t\t\t\t...txData,\n\t\t\t\t\tdata: this.getABIEncodedTransactionData(),\n\t\t\t\t});\n\t\t\t\treturn self._web3Wrapper.estimateGasAsync(txDataWithDefaults);\n\t\t\t},\n\t\t\tasync callAsync(callData = {}, defaultBlock) {\n\t\t\t\tBaseContract._assertCallParams(callData, defaultBlock);\n\t\t\t\tconst rawCallResult = await self._performCallAsync(\n\t\t\t\t\t{ ...callData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tdefaultBlock\n\t\t\t\t);\n\t\t\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\t\t\treturn abiEncoder.strictDecodeReturnValue(rawCallResult);\n\t\t\t},\n\t\t\tgetABIEncodedTransactionData() {\n\t\t\t\treturn self._strictEncodeArguments(functionSignature, [\n\t\t\t\t\t_token.toLowerCase(),\n\t\t\t\t\t_asset.toLowerCase(),\n\t\t\t\t\t_name,\n\t\t\t\t\t_symbol,\n\t\t\t\t\t_type,\n\t\t\t\t]);\n\t\t\t},\n\t\t};\n\t}\n\n\tremoveToken(_token) {\n\t\tconst self = this;\n\t\tassert.isString(\"_token\", _token);\n\t\tconst functionSignature = \"removeToken(address)\";\n\n\t\treturn {\n\t\t\tasync sendTransactionAsync(txData, opts = { shouldValidate: true }) {\n\t\t\t\tconst txDataWithDefaults = await self._applyDefaultsToTxDataAsync(\n\t\t\t\t\t{ ...txData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tthis.estimateGasAsync.bind(this)\n\t\t\t\t);\n\t\t\t\tif (opts.shouldValidate !== false) {\n\t\t\t\t\tawait this.callAsync(txDataWithDefaults);\n\t\t\t\t}\n\t\t\t\treturn self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);\n\t\t\t},\n\t\t\tawaitTransactionSuccessAsync(txData, opts = { shouldValidate: true }) {\n\t\t\t\treturn self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);\n\t\t\t},\n\t\t\tasync estimateGasAsync(txData) {\n\t\t\t\tconst txDataWithDefaults = await self._applyDefaultsToTxDataAsync({\n\t\t\t\t\t...txData,\n\t\t\t\t\tdata: this.getABIEncodedTransactionData(),\n\t\t\t\t});\n\t\t\t\treturn self._web3Wrapper.estimateGasAsync(txDataWithDefaults);\n\t\t\t},\n\t\t\tasync callAsync(callData = {}, defaultBlock) {\n\t\t\t\tBaseContract._assertCallParams(callData, defaultBlock);\n\t\t\t\tconst rawCallResult = await self._performCallAsync(\n\t\t\t\t\t{ ...callData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tdefaultBlock\n\t\t\t\t);\n\t\t\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\t\t\treturn abiEncoder.strictDecodeReturnValue(rawCallResult);\n\t\t\t},\n\t\t\tgetABIEncodedTransactionData() {\n\t\t\t\treturn self._strictEncodeArguments(functionSignature, [_token.toLowerCase()]);\n\t\t\t},\n\t\t};\n\t}\n\n\tsetTokenName(_token, _name) {\n\t\tconst self = this;\n\t\tassert.isString(\"_token\", _token);\n\t\tassert.isString(\"_name\", _name);\n\t\tconst functionSignature = \"setTokenName(address,string)\";\n\n\t\treturn {\n\t\t\tasync sendTransactionAsync(txData, opts = { shouldValidate: true }) {\n\t\t\t\tconst txDataWithDefaults = await self._applyDefaultsToTxDataAsync(\n\t\t\t\t\t{ ...txData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tthis.estimateGasAsync.bind(this)\n\t\t\t\t);\n\t\t\t\tif (opts.shouldValidate !== false) {\n\t\t\t\t\tawait this.callAsync(txDataWithDefaults);\n\t\t\t\t}\n\t\t\t\treturn self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);\n\t\t\t},\n\t\t\tawaitTransactionSuccessAsync(txData, opts = { shouldValidate: true }) {\n\t\t\t\treturn self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);\n\t\t\t},\n\t\t\tasync estimateGasAsync(txData) {\n\t\t\t\tconst txDataWithDefaults = await self._applyDefaultsToTxDataAsync({\n\t\t\t\t\t...txData,\n\t\t\t\t\tdata: this.getABIEncodedTransactionData(),\n\t\t\t\t});\n\t\t\t\treturn self._web3Wrapper.estimateGasAsync(txDataWithDefaults);\n\t\t\t},\n\t\t\tasync callAsync(callData = {}, defaultBlock) {\n\t\t\t\tBaseContract._assertCallParams(callData, defaultBlock);\n\t\t\t\tconst rawCallResult = await self._performCallAsync(\n\t\t\t\t\t{ ...callData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tdefaultBlock\n\t\t\t\t);\n\t\t\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\t\t\treturn abiEncoder.strictDecodeReturnValue(rawCallResult);\n\t\t\t},\n\t\t\tgetABIEncodedTransactionData() {\n\t\t\t\treturn self._strictEncodeArguments(functionSignature, [_token.toLowerCase(), _name]);\n\t\t\t},\n\t\t};\n\t}\n\n\tsetTokenSymbol(_token, _symbol) {\n\t\tconst self = this;\n\t\tassert.isString(\"_token\", _token);\n\t\tassert.isString(\"_symbol\", _symbol);\n\t\tconst functionSignature = \"setTokenSymbol(address,string)\";\n\n\t\treturn {\n\t\t\tasync sendTransactionAsync(txData, opts = { shouldValidate: true }) {\n\t\t\t\tconst txDataWithDefaults = await self._applyDefaultsToTxDataAsync(\n\t\t\t\t\t{ ...txData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tthis.estimateGasAsync.bind(this)\n\t\t\t\t);\n\t\t\t\tif (opts.shouldValidate !== false) {\n\t\t\t\t\tawait this.callAsync(txDataWithDefaults);\n\t\t\t\t}\n\t\t\t\treturn self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);\n\t\t\t},\n\t\t\tawaitTransactionSuccessAsync(txData, opts = { shouldValidate: true }) {\n\t\t\t\treturn self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);\n\t\t\t},\n\t\t\tasync estimateGasAsync(txData) {\n\t\t\t\tconst txDataWithDefaults = await self._applyDefaultsToTxDataAsync({\n\t\t\t\t\t...txData,\n\t\t\t\t\tdata: this.getABIEncodedTransactionData(),\n\t\t\t\t});\n\t\t\t\treturn self._web3Wrapper.estimateGasAsync(txDataWithDefaults);\n\t\t\t},\n\t\t\tasync callAsync(callData = {}, defaultBlock) {\n\t\t\t\tBaseContract._assertCallParams(callData, defaultBlock);\n\t\t\t\tconst rawCallResult = await self._performCallAsync(\n\t\t\t\t\t{ ...callData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tdefaultBlock\n\t\t\t\t);\n\t\t\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\t\t\treturn abiEncoder.strictDecodeReturnValue(rawCallResult);\n\t\t\t},\n\t\t\tgetABIEncodedTransactionData() {\n\t\t\t\treturn self._strictEncodeArguments(functionSignature, [_token.toLowerCase(), _symbol]);\n\t\t\t},\n\t\t};\n\t}\n\n\tgetTokenAddressBySymbol(_symbol) {\n\t\tconst self = this;\n\t\tassert.isString(\"_symbol\", _symbol);\n\t\tconst functionSignature = \"getTokenAddressBySymbol(string)\";\n\n\t\treturn {\n\t\t\tasync callAsync(callData = {}, defaultBlock) {\n\t\t\t\tBaseContract._assertCallParams(callData, defaultBlock);\n\t\t\t\tconst rawCallResult = await self._performCallAsync(\n\t\t\t\t\t{ ...callData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tdefaultBlock\n\t\t\t\t);\n\t\t\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\t\t\treturn abiEncoder.strictDecodeReturnValue < string > (rawCallResult);\n\t\t\t},\n\t\t\tgetABIEncodedTransactionData() {\n\t\t\t\treturn self._strictEncodeArguments(functionSignature, [_symbol]);\n\t\t\t},\n\t\t};\n\t}\n\n\tgetTokenAddressByName(_name) {\n\t\tconst self = this;\n\t\tassert.isString(\"_name\", _name);\n\t\tconst functionSignature = \"getTokenAddressByName(string)\";\n\n\t\treturn {\n\t\t\tasync callAsync(callData = {}, defaultBlock) {\n\t\t\t\tBaseContract._assertCallParams(callData, defaultBlock);\n\t\t\t\tconst rawCallResult = await self._performCallAsync(\n\t\t\t\t\t{ ...callData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tdefaultBlock\n\t\t\t\t);\n\t\t\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\t\t\treturn abiEncoder.strictDecodeReturnValue < string > (rawCallResult);\n\t\t\t},\n\t\t\tgetABIEncodedTransactionData() {\n\t\t\t\treturn self._strictEncodeArguments(functionSignature, [_name]);\n\t\t\t},\n\t\t};\n\t}\n\n\tgetTokenByAddress(_token) {\n\t\tconst self = this;\n\t\tassert.isString(\"_token\", _token);\n\t\tconst functionSignature = \"getTokenByAddress(address)\";\n\n\t\treturn {\n\t\t\tasync callAsync(callData = {}, defaultBlock) {\n\t\t\t\tBaseContract._assertCallParams(callData, defaultBlock);\n\t\t\t\tconst rawCallResult = await self._performCallAsync(\n\t\t\t\t\t{ ...callData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tdefaultBlock\n\t\t\t\t);\n\t\t\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\t\t\treturn abiEncoder.strictDecodeReturnValue(rawCallResult);\n\t\t\t},\n\t\t\tgetABIEncodedTransactionData() {\n\t\t\t\treturn self._strictEncodeArguments(functionSignature, [_token.toLowerCase()]);\n\t\t\t},\n\t\t};\n\t}\n\n\tgetTokenByName(_name) {\n\t\tconst self = this;\n\t\tassert.isString(\"_name\", _name);\n\t\tconst functionSignature = \"getTokenByName(string)\";\n\n\t\treturn {\n\t\t\tasync callAsync(callData = {}, defaultBlock) {\n\t\t\t\tBaseContract._assertCallParams(callData, defaultBlock);\n\t\t\t\tconst rawCallResult = await self._performCallAsync(\n\t\t\t\t\t{ ...callData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tdefaultBlock\n\t\t\t\t);\n\t\t\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\t\t\treturn abiEncoder.strictDecodeReturnValue(rawCallResult);\n\t\t\t},\n\t\t\tgetABIEncodedTransactionData() {\n\t\t\t\treturn self._strictEncodeArguments(functionSignature, [_name]);\n\t\t\t},\n\t\t};\n\t}\n\n\tgetTokenBySymbol(_symbol) {\n\t\tconst self = this;\n\t\tassert.isString(\"_symbol\", _symbol);\n\t\tconst functionSignature = \"getTokenBySymbol(string)\";\n\n\t\treturn {\n\t\t\tasync callAsync(callData = {}, defaultBlock) {\n\t\t\t\tBaseContract._assertCallParams(callData, defaultBlock);\n\t\t\t\tconst rawCallResult = await self._performCallAsync(\n\t\t\t\t\t{ ...callData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tdefaultBlock\n\t\t\t\t);\n\t\t\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\t\t\treturn abiEncoder.strictDecodeReturnValue(rawCallResult);\n\t\t\t},\n\t\t\tgetABIEncodedTransactionData() {\n\t\t\t\treturn self._strictEncodeArguments(functionSignature, [_symbol]);\n\t\t\t},\n\t\t};\n\t}\n\n\tgetTokenAddresses() {\n\t\tconst self = this;\n\t\tconst functionSignature = \"getTokenAddresses()\";\n\n\t\treturn {\n\t\t\tasync callAsync(callData = {}, defaultBlock) {\n\t\t\t\tBaseContract._assertCallParams(callData, defaultBlock);\n\t\t\t\tconst rawCallResult = await self._performCallAsync(\n\t\t\t\t\t{ ...callData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tdefaultBlock\n\t\t\t\t);\n\t\t\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\t\t\treturn abiEncoder.strictDecodeReturnValue(rawCallResult);\n\t\t\t},\n\t\t\tgetABIEncodedTransactionData() {\n\t\t\t\treturn self._strictEncodeArguments(functionSignature, []);\n\t\t\t},\n\t\t};\n\t}\n\n\tgetTokens(_start, _count, _tokenType) {\n\t\tconst self = this;\n\t\tassert.isBigNumber(\"_start\", _start);\n\t\tassert.isBigNumber(\"_count\", _count);\n\t\tassert.isBigNumber(\"_tokenType\", _tokenType);\n\t\tconst functionSignature = \"getTokens(uint256,uint256,uint256)\";\n\n\t\treturn {\n\t\t\tasync callAsync(callData = {}, defaultBlock) {\n\t\t\t\tBaseContract._assertCallParams(callData, defaultBlock);\n\t\t\t\tconst rawCallResult = await self._performCallAsync(\n\t\t\t\t\t{ ...callData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tdefaultBlock\n\t\t\t\t);\n\t\t\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\t\t\treturn abiEncoder.strictDecodeReturnValue(rawCallResult);\n\t\t\t},\n\t\t\tgetABIEncodedTransactionData() {\n\t\t\t\treturn self._strictEncodeArguments(functionSignature, [_start, _count, _tokenType]);\n\t\t\t},\n\t\t};\n\t}\n\n\tisTokenType(_token, _tokenType) {\n\t\tconst self = this;\n\t\tassert.isString(\"_token\", _token);\n\t\tassert.isBigNumber(\"_tokenType\", _tokenType);\n\t\tconst functionSignature = \"isTokenType(address,uint256)\";\n\n\t\treturn {\n\t\t\tasync callAsync(callData = {}, defaultBlock) {\n\t\t\t\tBaseContract._assertCallParams(callData, defaultBlock);\n\t\t\t\tconst rawCallResult = await self._performCallAsync(\n\t\t\t\t\t{ ...callData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tdefaultBlock\n\t\t\t\t);\n\t\t\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\t\t\treturn abiEncoder.strictDecodeReturnValue(rawCallResult);\n\t\t\t},\n\t\t\tgetABIEncodedTransactionData() {\n\t\t\t\treturn self._strictEncodeArguments(functionSignature, [_token.toLowerCase(), _tokenType]);\n\t\t\t},\n\t\t};\n\t}\n\n\tgetTokenAsset(_token, _tokenType) {\n\t\tconst self = this;\n\t\tassert.isString(\"_token\", _token);\n\t\tassert.isBigNumber(\"_tokenType\", _tokenType);\n\t\tconst functionSignature = \"getTokenAsset(address,uint256)\";\n\n\t\treturn {\n\t\t\tasync callAsync(callData = {}, defaultBlock) {\n\t\t\t\tBaseContract._assertCallParams(callData, defaultBlock);\n\t\t\t\tconst rawCallResult = await self._performCallAsync(\n\t\t\t\t\t{ ...callData, data: this.getABIEncodedTransactionData() },\n\t\t\t\t\tdefaultBlock\n\t\t\t\t);\n\t\t\t\tconst abiEncoder = self._lookupAbiEncoder(functionSignature);\n\t\t\t\treturn abiEncoder.strictDecodeReturnValue(rawCallResult);\n\t\t\t},\n\t\t\tgetABIEncodedTransactionData() {\n\t\t\t\treturn self._strictEncodeArguments(functionSignature, [_token.toLowerCase(), _tokenType]);\n\t\t\t},\n\t\t};\n\t}\n\n\t/**\n\t * Subscribe to an event type emitted by the TokenizedRegistry contract.\n\t * @param eventName The TokenizedRegistry contract event you would like to subscribe to.\n\t * @param indexFilterValues An object where the keys are indexed args returned by the event and\n\t * the value is the value you are interested in. E.g `{maker: aUserAddressHex}`\n\t * @param callback Callback that gets called when a log is added/removed\n\t * @param isVerbose Enable verbose subscription warnings (e.g recoverable network issues encountered)\n\t * @return Subscription token used later to unsubscribe\n\t */\n\tsubscribe(eventName, indexFilterValues, callback, isVerbose = false, blockPollingIntervalMs) {\n\t\tassert.doesBelongToStringEnum(\"eventName\", eventName, TokenizedRegistryEvents);\n\t\tassert.doesConformToSchema(\"indexFilterValues\", indexFilterValues, schemas.indexFilterValuesSchema);\n\t\tassert.isFunction(\"callback\", callback);\n\t\tconst subscriptionToken = this._subscriptionManager.subscribe(\n\t\t\tthis.address,\n\t\t\teventName,\n\t\t\tindexFilterValues,\n\t\t\tTokenizedRegistryContract.ABI(),\n\t\t\tcallback,\n\t\t\tisVerbose,\n\t\t\tblockPollingIntervalMs\n\t\t);\n\t\treturn subscriptionToken;\n\t}\n\n\t/**\n\t * Cancel a subscription\n\t * @param subscriptionToken Subscription token returned by `subscribe()`\n\t */\n\tunsubscribe(subscriptionToken) {\n\t\tthis._subscriptionManager.unsubscribe(subscriptionToken);\n\t}\n\n\t/**\n\t * Cancels all existing subscriptions\n\t */\n\tunsubscribeAll() {\n\t\tthis._subscriptionManager.unsubscribeAll();\n\t}\n\n\t/**\n\t * Gets historical logs without creating a subscription\n\t * @param eventName The TokenizedRegistry contract event you would like to subscribe to.\n\t * @param blockRange Block range to get logs from.\n\t * @param indexFilterValues An object where the keys are indexed args returned by the event and\n\t * the value is the value you are interested in. E.g `{_from: aUserAddressHex}`\n\t * @return Array of logs that match the parameters\n\t */\n\tasync getLogsAsync(eventName, blockRange, indexFilterValues) {\n\t\tassert.doesBelongToStringEnum(\"eventName\", eventName, TokenizedRegistryEvents);\n\t\tassert.doesConformToSchema(\"blockRange\", blockRange, schemas.blockRangeSchema);\n\t\tassert.doesConformToSchema(\"indexFilterValues\", indexFilterValues, schemas.indexFilterValuesSchema);\n\t\tconst logs = await this._subscriptionManager.getLogsAsync(\n\t\t\tthis.address,\n\t\t\teventName,\n\t\t\tblockRange,\n\t\t\tindexFilterValues,\n\t\t\tTokenizedRegistryContract.ABI()\n\t\t);\n\t\treturn logs;\n\t}\n\n\tconstructor(\n\t\taddress,\n\t\tsupportedProvider,\n\t\ttxDefaults,\n\t\tlogDecodeDependencies,\n\t\tdeployedBytecode = TokenizedRegistryContract.deployedBytecode\n\t) {\n\t\tsuper(\n\t\t\t\"TokenizedRegistry\",\n\t\t\tTokenizedRegistryContract.ABI(),\n\t\t\taddress,\n\t\t\tsupportedProvider,\n\t\t\ttxDefaults,\n\t\t\tlogDecodeDependencies,\n\t\t\tdeployedBytecode\n\t\t);\n\t\tclassUtils.bindAll(this, [\"_abiEncoderByFunctionSignature\", \"address\", \"_web3Wrapper\"]);\n\t\tthis._subscriptionManager = new SubscriptionManager(TokenizedRegistryContract.ABI(), this._web3Wrapper);\n\t\tTokenizedRegistryContract.ABI().forEach((item, index) => {\n\t\t\tif (item.type === \"function\") {\n\t\t\t\tconst methodAbi = item;\n\t\t\t\tthis._methodABIIndex[methodAbi.name] = index;\n\t\t\t}\n\t\t});\n\t}\n}\n\n// tslint:disable:max-file-line-count\n// tslint:enable:no-unbound-method no-parameter-reassignment no-consecutive-blank-lines ordered-imports align\n// tslint:enable:trailing-comma whitespace no-trailing-whitespace\n"],"sourceRoot":""}